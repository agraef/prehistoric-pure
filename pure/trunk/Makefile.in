
# This Makefile requires GNU make. Really.

SHELL = /bin/sh

# Package information.

name    = @PACKAGE_NAME@
version = @PACKAGE_VERSION@
dist    = $(name)-$(version)

# Source and installation paths.

srcdir      = @srcdir@
VPATH       = @srcdir@

prefix      = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@

bindir      = @bindir@
includedir  = @includedir@
libdir      = @libdir@
datadir     = @datadir@
mandir      = @mandir@
man1dir     = $(mandir)/man1

# Staging directory for 'make install'.

DESTDIR=

# OS-specific file suffixes. Windows (EXE=.exe, DLL=.dll) is handled
# automatically by configure, for other systems with unusual conventions set
# these as needed.

EXE=@EXEEXT@
ifeq ($(EXE),.exe)
DLL=.dll
else
DLL=.so
endif

# Linker flags and required libraries. These are determined automatically by
# configure. Use EXTRA_LIBS to add any additional platform-specific libraries
# that might be required.

LDFLAGS = @LDFLAGS@
LIBS = @LIBS@ $(EXTRA_LIBS)

ifeq ($(EXE),.exe)
EXTRA_LIBS = -limagehlp -lpsapi
else
EXTRA_LIBS =
endif

# Compilation flags.

LLVM_FLAGS = `llvm-config --cppflags`
LLVM_LIBS = `llvm-config --ldflags --libs core jit native`

CPPFLAGS = @CPPFLAGS@ $(LLVM_FLAGS)
CXXFLAGS = @CXXFLAGS@ -Wall

# Pure library name. Currently we use a simple versioning scheme, which
# requires that the library version matches that of the interpreter. With some
# fiddling, this enables you to install different versions of the Pure
# interpreter on the same system.

libpure_base = $(name)
libpure_vers = $(libpure_base)-$(version)

libpure      = lib$(libpure_vers)$(DLL)
libpurelnk   = lib$(libpure_base)$(DLL)
LIBPURE      = -l$(libpure_vers)

# No need to edit below this line. Unless you really have to. :) ############

SOURCE = expr.cc expr.hh funcall.h interpreter.cc interpreter.hh lexer.ll \
matcher.cc matcher.hh parser.yy printer.cc printer.hh \
runtime.cc runtime.h symtable.cc symtable.hh util.cc util.hh
EXTRA_SOURCE = lexer.cc parser.cc parser.hh location.hh position.hh stack.hh
OBJECT = $(subst .cc,.o,$(filter %.cc,$(SOURCE) $(EXTRA_SOURCE)))

DISTFILES = COPYING ChangeLog INSTALL NEWS README TODO \
Makefile.in aclocal.m4 configure.ac configure config.h.in \
$(SOURCE) $(EXTRA_SOURCE) w3centities.c pure.cc pure.1 pure.xml pure.vim \
examples/*.pure lib/*.pure test/*.pure test/*.log

.PHONY: all html dvi ps pdf clean realclean depend install uninstall strip \
dist distcheck cleanlogs logs check

# compilation

all: pure$(EXE)

pure$(EXE): pure.o $(libpure)
	$(CXX) -o $@ $(LDFLAGS) pure.o -L. $(LIBPURE) $(LIBS)

$(libpure): $(OBJECT)
	$(CXX) -shared -o $@ $(LDFLAGS) $(OBJECT) $(LLVM_LIBS) $(LIBS)
	ln -sf $(libpure) $(libpurelnk)

pure.o: pure.cc
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -DPURELIB='"$(libdir)/pure"' -c -o $@ $<

lexer.cc: lexer.ll
	flex -o lexer.cc $<

parser.cc: parser.yy
	bison -v -o parser.cc $<

parser.hh location.hh position.hh stack.hh: parser.cc

# documentation in various formats (requires groff)

html: pure.html
dvi: pure.dvi
ps: pure.ps
pdf: pure.pdf

%.html: %.1
	groff -man -Thtml $< > $@

%.dvi: %.1
	groff -man -Tdvi $< > $@

%.ps: %.1
	groff -man -Tps $< > $@

%.pdf: %.1
	groff -man -Tps $< | ps2pdf - $@

# cleaning

clean:
	rm -f *~ *.bak *.html *.dvi *.ps *.pdf pure$(EXE) $(OBJECT) pure.o $(libpurelnk) $(libpure) parser.output

distclean: clean
	rm -f Makefile config.h config.log config.status $(dist).tar.gz

realclean: distclean
	rm -f $(addprefix $(srcdir)/, test/*.log $(EXTRA_SOURCE))

# dependencies (rerun configure after this)

depend: $(SOURCE) $(EXTRA_SOURCE)
	(cd $(srcdir) && makedepend -f Makefile.in -Y pure.cc $(SOURCE) $(EXTRA_SOURCE) 2> /dev/null)

# installation

install: pure$(EXE)
	install -d $(DESTDIR)$(bindir) $(DESTDIR)$(libdir)/pure $(DESTDIR)$(man1dir)
	install pure$(EXE) $(DESTDIR)$(bindir)/pure$(EXE)
	install $(libpure) $(DESTDIR)$(libdir)/$(libpure)
	ln -sf $(libdir)/$(libpure) $(DESTDIR)$(libdir)/$(libpurelnk)
	install -m 644 $(srcdir)/lib/*.pure $(DESTDIR)$(libdir)/pure
	install -m 644 pure.1 $(DESTDIR)$(man1dir)/pure.1

uninstall:
	rm -rf $(DESTDIR)$(bindir)/pure$(EXE) $(DESTDIR)$(libdir)/$(libpure) $(DESTDIR)$(libdir)/$(libpurelnk) $(DESTDIR)$(libdir)/pure $(DESTDIR)$(man1dir)/pure.1

# roll a distribution tarball

dist:
	rm -rf $(dist)
	mkdir $(dist) && mkdir $(dist)/examples && mkdir $(dist)/lib && mkdir $(dist)/test
	(builddir=$$PWD; cd $(srcdir); for x in $(DISTFILES); do ln -sf $$PWD/$$x $$builddir/$(dist)/$$x; done)
	rm -f $(dist).tar.gz
	tar cfzh $(dist).tar.gz $(dist)
	rm -rf $(dist)

distcheck: dist
	tar xfz $(dist).tar.gz
	cd $(dist) && ./configure && make && make check && make install DESTDIR=./BUILD
	rm -rf $(dist)

# test logs, make check

level=7

tests = $(wildcard $(srcdir)/test/*.pure)
logs  = $(srcdir)/test/prelude.log $(tests:.pure=.log)

logs: $(logs)

cleanlogs:
	rm -f $(srcdir)/test/*.log

$(srcdir)/test/prelude.log: lib/prelude.pure lib/primitives.pure lib/strings.pure
	LD_LIBRARY_PATH=. PURELIB=$(srcdir)/lib ./pure -n -v$(level) $< > $@ 2>&1

%.log: %.pure
	LD_LIBRARY_PATH=. PURELIB=$(srcdir)/lib ./pure -v$(level) < $< > $@ 2>&1

check: pure
	@ echo Running tests.
	@ (export LD_LIBRARY_PATH=.; export PURELIB=$(srcdir)/lib; echo -n "prelude.pure: "; if ./pure -n -v$(level) $(srcdir)/lib/prelude.pure 2>&1 | diff -q - $(srcdir)/test/prelude.log > /dev/null; then echo passed; else echo FAILED; fi)
	@ (export LD_LIBRARY_PATH=.; export PURELIB=$(srcdir)/lib; for x in $(notdir $(tests)); do echo -n "$$x: "; if ./pure -v$(level) < $(srcdir)/test/$$x 2>&1 | diff -q - $(srcdir)/test/"`basename $$x .pure`.log" > /dev/null; then echo passed; else echo FAILED; fi; done)

# DO NOT DELETE

pure.o: interpreter.hh expr.hh matcher.hh symtable.hh printer.hh runtime.h
pure.o: parser.hh stack.hh util.hh location.hh position.hh config.h
expr.o: expr.hh interpreter.hh matcher.hh symtable.hh printer.hh runtime.h
expr.o: parser.hh stack.hh util.hh location.hh position.hh
interpreter.o: interpreter.hh expr.hh matcher.hh symtable.hh printer.hh
interpreter.o: runtime.h parser.hh stack.hh util.hh location.hh position.hh
interpreter.o: expr.hh matcher.hh symtable.hh printer.hh runtime.h parser.hh
interpreter.o: stack.hh util.hh location.hh position.hh
lexer.o: interpreter.hh expr.hh matcher.hh symtable.hh printer.hh runtime.h
lexer.o: parser.hh stack.hh util.hh location.hh position.hh
matcher.o: matcher.hh expr.hh
matcher.o: expr.hh
parser.o: expr.hh printer.hh matcher.hh runtime.h util.hh interpreter.hh
parser.o: symtable.hh parser.hh stack.hh location.hh position.hh
printer.o: printer.hh expr.hh matcher.hh runtime.h interpreter.hh symtable.hh
printer.o: parser.hh stack.hh util.hh location.hh position.hh
printer.o: expr.hh matcher.hh runtime.h
runtime.o: runtime.h expr.hh interpreter.hh matcher.hh symtable.hh printer.hh
runtime.o: parser.hh stack.hh util.hh location.hh position.hh funcall.h
symtable.o: symtable.hh expr.hh printer.hh matcher.hh runtime.h
symtable.o: expr.hh printer.hh matcher.hh runtime.h
util.o: util.hh config.h w3centities.c
lexer.o: interpreter.hh expr.hh matcher.hh symtable.hh printer.hh runtime.h
lexer.o: parser.hh stack.hh util.hh location.hh position.hh
parser.o: parser.hh stack.hh expr.hh printer.hh matcher.hh runtime.h util.hh
parser.o: location.hh position.hh interpreter.hh symtable.hh
parser.o: stack.hh expr.hh printer.hh matcher.hh runtime.h util.hh
parser.o: location.hh position.hh
location.o: position.hh
