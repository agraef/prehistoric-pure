
INSTALLING PURE (AND LLVM)
========== ==== ==== =====

These instructions (mostly by courtesy of Eddie Rucker, thanks Eddie!) explain
how to compile and install LLVM (which is the compiler backend required by
Pure) and the Pure interpreter itself. The instructions are for Linux and
similar Unix-like systems; the SYSTEM NOTES section at the end of this file
details the tweaks necessary to make Pure compile and run on various other
platforms. More information about installing LLVM and the required LLVM source
packages can be found at http://llvm.org.

Pure is known to work on Linux and Mac OSX, but should compile (with the usual
amount of tweaking) on all UNIX/POSIX-based platforms. We recommend using
version 4.x of the GNU C++ compiler; it should be available almost everywhere
(in fact, since you'll need LLVM anyway, you can also use the gcc frontend
available for LLVM). Other ANSI/ISO compatible C/C++ compilers will probably
work as well (after some fiddling with the compilation options and the sources
maybe), but this has not been tested. Also note that the Makefile pretty much
requires GNU make right now, so you should make sure that you have that
installed before trying to compile Pure.


BASIC INSTALLATION
===== ============

The basic installation process is as follows. Note that steps 1-3 are only
required once. Steps 2-3 can be avoided if binary LLVM packages are available
for your system. Additional instructions for compiling Pure from SVN sources
can be found in the INSTALLING FROM SVN SOURCES section below. Moreover, you
can refer to the OTHER COMPILATION OPTIONS section below for details about
various options available when building and installing Pure.

STEP 1. Make sure you have all the necessary dependencies installed (-dev
denotes corresponding development packages):

- GNU make, GNU C++ and the corresponding libraries;

- flex and bison (these are only required when compiling the Pure SVN sources,
  see the INSTALLING FROM SVN SOURCES section below);

- libgmp, -dev;

- libreadline, -dev;

- libltdl, -dev;

- subversion (only needed to fetch the SVN sources, see below).

E.g., the required packages for Ubuntu are: make, g++, g++ 4.0 multilib, flex,
bison, libgmp3c2, libgmp3-dev, readline5-dev, libltdl3, libldtl3-dev,
subversion.

STEP 2. Get and unpack the LLVM 2.2 sources at:
http://llvm.org/releases/download.html#2.2

STEP 3. Configure, build and install LLVM as follows:

$ cd llvm-2.2
$ ./configure --enable-optimized --disable-assertions --disable-expensive-checks --enable-targets=host-only
$ make ENABLE_OPTIMIZED=1
$ sudo make install

Note the configure flags; these are for an optimized (non-debug) build and
disable all compilation targets except the one for your system. To do a debug
build of LLVM, simply leave away all the extra configure parameters (except
possibly --enable-targets=host-only). Note, however, that this will
considerably slow down the Pure compiler.

STEP 4. Get and unpack the Pure sources at: http://pure-lang.sf.net/

The latest release tarballs can always be found on the SourceForge project
page. See "Downloads" on the Pure website for a quick link to the download
section.

STEP 5. Build and install Pure as follows (x.y denotes the current Pure
version number, 0.3 at the time of this writing):

$ cd pure-x.y
$ make
$ sudo make install
$ sudo /sbin/ldconfig

(The latter step is required on Linux systems to tell the dynamic linker to
update its cache so that it finds the Pure runtime library, libpure-x.y.so.
On other systems it may be sufficient to install the library in a location
which is searched by the dynamic linker.)

After the build is complete, you can check that Pure is working correctly on
your computer, as follows:

$ make check

STEP 6. The Pure interpreter should be ready to go now.

Run Pure interactively as:

$ pure
Pure 0.3 Copyright (c) 2008 by Albert Graef
This program is free software distributed under the GNU Public License
(GPL V3 or later). Please see the COPYING file for details.
Loaded prelude from /usr/local/lib/pure/prelude.pure.

Check that it works:

> 6*7;
42

Read the online documentation (this invokes the Pure manual page):

> help

Exit the interpreter (you can also just type the end-of-file character at the
beginning of a line, i.e., Ctrl-D on Unix):

> quit


INSTALLING FROM SVN SOURCES
========== ==== === =======

The latest development version of Pure is available in its subversion (SVN)
source code repository. You can browse the repository at:

http://pure-lang.svn.sourceforge.net/viewvc/pure-lang/

(See the pure/trunk subdirectory for the latest sources.)

Note that if you're going with the development sources, you'll also need
fairly recent versions of the flex and bison utilities (flex 2.5.31 and bison
2.3 should be ok).

To compile from the development sources, replace steps 4 and 5 above with:

STEP 4': Fetch the SVN sources.

$ svn co http://pure-lang.svn.sourceforge.net/svnroot/pure-lang pure-lang

This step needs to be done only once; once you've checked out your working
copy, you can update it to the latest revision by running 'svn up'.

STEP 5': Build and install Pure:

$ cd pure-lang/pure/trunk
$ make
$ sudo make install
$ sudo /sbin/ldconfig


OTHER COMPILATION OPTIONS
===== =========== =======

By default, the pure program is installed under /usr/local/bin, the
libpure-x.y.so library under /usr/local/lib, and the library scripts under
/usr/local/lib/pure. The installation directory can be changed by editing the
definition of the 'prefix' variable in the Makefile, or by specifying the
desired value on the 'make' command line, e.g.:

$ make all install prefix=/usr

Note that you should specify this option *both* at compile and installation
time since certain default paths are hardcoded into the interpreter (but can
be changed at runtime by setting corresponding environment variables, see the
manpage for details). Also note that if you install Pure into a non-standard
location, you may have to set the LD_LIBRARY_PATH variable so that the dynamic
linker finds the Pure runtime library, libpure-x.y.so.

After your build is done, you can (and should) also run 'make check' to verify
that your Pure interpreter works correctly. This can be done without
installing the software. In fact, there's no need to install the interpreter
if you just want to take it for a test drive, you can simply run it from the
source directory, if you set up the following environment variables:

- LD_LIBRARY_PATH=. This is required on Linux systems so that libpure-x.y.so
  is found. Other systems may require an analogous setting, or none at all.

- PURELIB=./lib This is required on all systems so that the interpreter finds
  the prelude and other library scripts.

After that you should be able to run the Pure interpreter from the source
directory, by typing './pure'.

There are a number of other variables you can set on the 'make' command line
if you need special compiler (CXXFLAGS) or linker flags (LDFLAGS), or if you
have to add platform-specific libraries (LIBS). Please see the Makefile for
additional information on these.

As of Pure 0.3, the 'default' build now also includes basic optimizations
(-O). This build should be ok for most purposes, and has the advantage that it
does additional runtime checks which provide diagnostics useful for
maintainers if anything is wrong with the interpreter.

However, you can also build a "release" version of the interpreter as follows:

$ make build=release

This disables all runtime checks and debugging information in the interpreter
and also uses a higher level of optimization. The 'release' build will usually
give you faster execution times, but the differences aren't really that big
anymore (5-10% compared to the default flags on my Linux system running gcc
4.1, YMMV), so you are encouraged to use the 'default' build unless
performance is really critical.

To get smaller executables with either the default or the release build, add
'LDFLAGS=-s' to the 'make' command (gcc only, other compilers may provide a
similar flag to strip compiled executables and libraries).

You can also do a 'debug' build as follows:

$ make build=debug

This is like the standard build, but disables all optimizations, so
compilation is faster but the compiled interpreter is *much* slower (a factor
of about 2 on my Linux box). Hence this build is only recommended for
debugging purposes.

More details on the build and installation process and other available targets
and options can be found in the Makefile.


SYSTEM NOTES
====== =====

Pure is known to work on recent Linux and Mac OSX versions under x86, x86-64
and ppc, but there are a few system-specific quirks which are discussed below.
(Please also see the CAVEATS AND NOTES section of the manual page for
information on other known limitations of the current implementation.)

ALL PLATFORMS
--- ---------

Compiling the release version (make build=release) using gcc with all warnings
turned on (which is the default) will give you the warning "dereferencing
type-punned pointer will break strict-aliasing rules" at some point in
util.cc. This is harmless and can be ignored.

If your Pure program runs out of stack space, the interpreter will segfault.
This is *not* a bug, it happens because runtime stack checks are disabled by
default for performance reasons. You can enable stack checks by setting the
PURE_STACK environment variable accordingly; see the pure(1) manual page for
details. The interpreter will then generate orderly "stack fault" exceptions
in case of a stack overflow.

64 BIT SYSTEMS
-- --- -------

64 bit systems are fully supported by Pure. Alas, for unknown reasons the
'debug' build currently does *not* work on (some?) 64 bit systems using
gcc. This has been seen on various different 64 bit Linux versions, YMMV. You
can tell that you're bitten by this bug if, after running 'make debug' (or
using similar, custom compilation flags), 'make check' fails on most tests.
Fortunately, it seems that you can easily work around this by making sure that
you have at least -O enabled when compiling runtime.cc. Also please note that
the 'default' and 'release' builds should work fine. 32 bit builds also seem
to be unaffected.

LINUX
-----

Linux is the primary development platform for this software, and the sources
should build out of the box on all recent Linux distributions.

MAC OSX
--- ---

A port by Ryan Schmidt exists in the MacPorts collection at
http://www.macports.org/. If you compile Pure from the original sources
yourself, you should add the -liconv flag to the link line. To these ends,
build Pure with the following make command (add the build=release option for
the release build):

$ make LIBS="-liconv"

Also note that with at least some current versions of the Apple gcc compiler
(4.0.1 and similar) you'll get the (bogus) warning "control reaches end of
non-void function" a couple of times in interpreter.cc. These are due to a bug
in older gcc versions (see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=16558),
but they are harmless and can be ignored. These warnings should also go away
once Apple upgrades its SDK to a newer gcc version.

MS WINDOWS
-- -------

Jiri Spitz is currently working on a Windows port using Mingw. Once this is
finished, we'll provide Windows installation instructions here. For the time
being, you can try for yourself; porting should be rather straightforward with
either Cygwin (http://www.cygwin.com/) or Mingw (http://www.mingw.org/), once
you have all the necessary dependencies and a suitable version of LLVM
installed.


May 2008
Albert Graef <Dr.Graef at t-online.de>
Eddie Rucker <erucker at bmc.edu>
