{
  rule #0: a = set (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let a = set (1..10);
{
  rule #0: b = set (6..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let b = set (6..10);
{
  rule #0: c = bag (1..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let c = bag (1..10);
{
  rule #0: d = bag (6..10)
  state 0: #0
	<var> state 1
  state 1: #0
}
let d = bag (6..10);
{
  rule #0: e = set (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let e = set (map str (1..10));
{
  rule #0: f = bag (map str (1..10))
  state 0: #0
	<var> state 1
  state 1: #0
}
let f = bag (map str (1..10));
a;
Set (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
b;
Set (bin 7 (-1) (bin 6 0 nil nil) (bin 9 0 (bin 8 0 nil nil) (bin 10 0 nil nil)))
c;
Bag (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
d;
Bag (bin 7 (-1) (bin 6 0 nil nil) (bin 9 0 (bin 8 0 nil nil) (bin 10 0 nil nil)))
e;
Set (bin "4" 0 (bin "2" 1 (bin "1" (-1) nil (bin "10" 0 nil nil)) (bin "3" 0 nil nil)) (bin "6" (-1) (bin "5" 0 nil nil) (bin "8" 0 (bin "7" 0 nil nil) (bin "9" 0 nil nil))))
f;
Bag (bin "4" 0 (bin "2" 1 (bin "1" (-1) nil (bin "10" 0 nil nil)) (bin "3" 0 nil nil)) (bin "6" (-1) (bin "5" 0 nil nil) (bin "8" 0 (bin "7" 0 nil nil) (bin "9" 0 nil nil))))
setp a;
1
setp c;
0
bagp c;
1
bagp a;
0
null emptyset;
1
null emptybag;
1
null a;
0
null c;
0
rmfirst a;
Set (bin 4 (-1) (bin 2 (-1) nil (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
rmfirst c;
Bag (bin 4 (-1) (bin 2 (-1) nil (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
rmlast a;
Set (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 1 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 0 nil nil)))
rmlast c;
Bag (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 1 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 0 nil nil)))
first a;
1
last a;
10
first c;
1
last c;
10
#a;
10
#c;
10
member a 5;
1
member a 50;
0
member c 5;
1
member c 50;
0
a==b;
0
a!=b;
1
a<b;
0
a<=b;
0
a>b;
1
a>=b;
1
a==a;
1
a!=a;
0
a<a;
0
a<=a;
1
a>a;
0
a>=a;
1
c==d;
0
c!=d;
1
c<d;
0
c<=d;
0
c>d;
1
c>=d;
1
c==c;
1
c!=c;
0
c<c;
0
c<=c;
1
c>c;
0
c>=c;
1
a+b;
Set (bin 4 (-1) (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 8 0 (bin 6 0 (bin 5 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil))))
a*b;
Set (bin 8 0 (bin 6 (-1) nil (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil)))
a-b;
Set (bin 4 1 (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 5 0 nil nil))
c+d;
Bag (bin 6 (-1) (bin 4 1 (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 5 0 nil nil)) (bin 8 (-1) (bin 7 0 (bin 6 0 nil nil) (bin 7 0 nil nil)) (bin 9 (-1) (bin 8 0 nil nil) (bin 10 0 (bin 9 0 nil nil) (bin 10 0 nil nil)))))
c*d;
Bag (bin 8 0 (bin 6 (-1) nil (bin 7 0 nil nil)) (bin 9 (-1) nil (bin 10 0 nil nil)))
c-d;
Bag (bin 4 1 (bin 2 0 (bin 1 0 nil nil) (bin 3 0 nil nil)) (bin 5 0 nil nil))
c+d-d;
Bag (bin 5 0 (bin 2 (-1) (bin 1 0 nil nil) (bin 4 1 (bin 3 0 nil nil) nil)) (bin 8 0 (bin 7 1 (bin 6 0 nil nil) nil) (bin 9 (-1) nil (bin 10 0 nil nil))))
