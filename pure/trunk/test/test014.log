def inf = 1e+307*1e+307;
def nan = inf-inf;
abs x/*0:1*/::int = if x/*0:1*/>=0 then x/*0:1*/ else -x/*0:1*/;
abs x/*0:1*/::bigint = if x/*0:1*/>=0 then x/*0:1*/ else -x/*0:1*/;
abs x/*0:1*/::double = if x/*0:1*/>=0 then x/*0:1*/ else -x/*0:1*/;
sgn x/*0:1*/::int = if x/*0:1*/>0 then 1 else if x/*0:1*/<0 then -1 else 0;
sgn x/*0:1*/::bigint = if x/*0:1*/>0 then 1 else if x/*0:1*/<0 then -1 else 0;
sgn x/*0:1*/::double = if x/*0:1*/>0 then 1 else if x/*0:1*/<0 then -1 else 0;
min x/*0:01*/ y/*0:1*/ = if x/*0:01*/<=y/*0:1*/ then x/*0:01*/ else y/*0:1*/;
max x/*0:01*/ y/*0:1*/ = if x/*0:01*/>=y/*0:1*/ then x/*0:01*/ else y/*0:1*/;
succ x/*0:1*/ = x/*0:1*/+1;
pred x/*0:1*/ = x/*0:1*/-1;
floor x/*0:1*/::int = x/*0:1*/;
floor x/*0:1*/::bigint = x/*0:1*/;
ceil x/*0:1*/::int = x/*0:1*/;
ceil x/*0:1*/::bigint = x/*0:1*/;
round x/*0:1*/::int = x/*0:1*/;
round x/*0:1*/::bigint = x/*0:1*/;
trunc x/*0:1*/::int = x/*0:1*/;
trunc x/*0:1*/::bigint = x/*0:1*/;
frac x/*0:1*/::int = x/*0:1*/-trunc x/*0:1*/;
frac x/*0:1*/::bigint = x/*0:1*/-trunc x/*0:1*/;
frac x/*0:1*/::double = x/*0:1*/-trunc x/*0:1*/;
sqrt x/*0:1*/::double = c_sqrt x/*0:1*/ if x/*0:1*/>=0;
sqrt x/*0:1*/::int = sqrt (double x/*0:1*/);
sqrt x/*0:1*/::bigint = sqrt (double x/*0:1*/);
ln x/*0:1*/::double = c_log x/*0:1*/ if x/*0:1*/>=0.0;
log x/*0:1*/::double = c_log x/*0:1*//c_log 10.0 if x/*0:1*/>=0.0;
exp x/*0:1*/::int = exp (double x/*0:1*/);
exp x/*0:1*/::bigint = exp (double x/*0:1*/);
ln x/*0:1*/::int = ln (double x/*0:1*/);
ln x/*0:1*/::bigint = ln (double x/*0:1*/);
log x/*0:1*/::int = log (double x/*0:1*/);
log x/*0:1*/::bigint = log (double x/*0:1*/);
{
  rule #0: max x y = if x>=y then x else y
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
}
{
  rule #0: abs x::int = if x>=0 then x else -x
  rule #1: abs x::bigint = if x>=0 then x else -x
  rule #2: abs x::double = if x>=0 then x else -x
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #0
  state 2: #1
  state 3: #2
}
{
  rule #0: sgn x::int = if x>0 then 1 else if x<0 then -1 else 0
  rule #1: sgn x::bigint = if x>0 then 1 else if x<0 then -1 else 0
  rule #2: sgn x::double = if x>0 then 1 else if x<0 then -1 else 0
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #0
  state 2: #1
  state 3: #2
}
{
  rule #0: min x y = if x<=y then x else y
  state 0: #0
	<var> state 1
  state 1: #0
	<var> state 2
  state 2: #0
}
{
  rule #0: succ x = x+1
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: pred x = x-1
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: floor x::int = x
  rule #1: floor x::bigint = x
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: ceil x::int = x
  rule #1: ceil x::bigint = x
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: round x::int = x
  rule #1: round x::bigint = x
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: trunc x::int = x
  rule #1: trunc x::bigint = x
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: frac x::int = x-trunc x
  rule #1: frac x::bigint = x-trunc x
  rule #2: frac x::double = x-trunc x
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #0
  state 2: #1
  state 3: #2
}
{
  rule #0: sqrt x::double = c_sqrt x if x>=0
  rule #1: sqrt x::int = sqrt (double x)
  rule #2: sqrt x::bigint = sqrt (double x)
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #1
  state 2: #2
  state 3: #0
}
{
  rule #0: exp x::int = exp (double x)
  rule #1: exp x::bigint = exp (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: ln x::double = c_log x if x>=0.0
  rule #1: ln x::int = ln (double x)
  rule #2: ln x::bigint = ln (double x)
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #1
  state 2: #2
  state 3: #0
}
{
  rule #0: log x::double = c_log x/c_log 10.0 if x>=0.0
  rule #1: log x::int = log (double x)
  rule #2: log x::bigint = log (double x)
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #1
  state 2: #2
  state 3: #0
}
def e = exp 1.0;
sin x/*0:1*/::int = sin (double x/*0:1*/);
sin x/*0:1*/::bigint = sin (double x/*0:1*/);
cos x/*0:1*/::int = cos (double x/*0:1*/);
cos x/*0:1*/::bigint = cos (double x/*0:1*/);
tan x/*0:1*/::int = tan (double x/*0:1*/);
tan x/*0:1*/::bigint = tan (double x/*0:1*/);
asin x/*0:1*/::int = asin (double x/*0:1*/);
asin x/*0:1*/::bigint = asin (double x/*0:1*/);
acos x/*0:1*/::int = acos (double x/*0:1*/);
acos x/*0:1*/::bigint = acos (double x/*0:1*/);
atan x/*0:1*/::int = atan (double x/*0:1*/);
atan x/*0:1*/::bigint = atan (double x/*0:1*/);
atan2 x/*0:01*/::int y/*0:1*/::int = atan2 (double x/*0:01*/) (double y/*0:1*/);
atan2 x/*0:01*/::bigint y/*0:1*/::bigint = atan2 (double x/*0:01*/) (double y/*0:1*/);
atan2 x/*0:01*/::bigint y/*0:1*/::int = atan2 (double x/*0:01*/) (double y/*0:1*/);
atan2 x/*0:01*/::int y/*0:1*/::bigint = atan2 (double x/*0:01*/) (double y/*0:1*/);
atan2 x/*0:01*/::int y/*0:1*/::double = atan2 (double x/*0:01*/) y/*0:1*/;
atan2 x/*0:01*/::bigint y/*0:1*/::double = atan2 (double x/*0:01*/) y/*0:1*/;
atan2 x/*0:01*/::double y/*0:1*/::int = atan2 x/*0:01*/ (double y/*0:1*/);
atan2 x/*0:01*/::double y/*0:1*/::bigint = atan2 x/*0:01*/ (double y/*0:1*/);
{
  rule #0: sin x::int = sin (double x)
  rule #1: sin x::bigint = sin (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: cos x::int = cos (double x)
  rule #1: cos x::bigint = cos (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: tan x::int = tan (double x)
  rule #1: tan x::bigint = tan (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: asin x::int = asin (double x)
  rule #1: asin x::bigint = asin (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: acos x::int = acos (double x)
  rule #1: acos x::bigint = acos (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: atan x::int = atan (double x)
  rule #1: atan x::bigint = atan (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: atan2 x::int y::int = atan2 (double x) (double y)
  rule #1: atan2 x::bigint y::bigint = atan2 (double x) (double y)
  rule #2: atan2 x::bigint y::int = atan2 (double x) (double y)
  rule #3: atan2 x::int y::bigint = atan2 (double x) (double y)
  rule #4: atan2 x::int y::double = atan2 (double x) y
  rule #5: atan2 x::bigint y::double = atan2 (double x) y
  rule #6: atan2 x::double y::int = atan2 x (double y)
  rule #7: atan2 x::double y::bigint = atan2 x (double y)
  state 0: #0 #1 #2 #3 #4 #5 #6 #7
	<var>::int state 1
	<var>::bigint state 5
	<var>::double state 9
  state 1: #0 #3 #4
	<var>::int state 2
	<var>::bigint state 3
	<var>::double state 4
  state 2: #0
  state 3: #3
  state 4: #4
  state 5: #1 #2 #5
	<var>::int state 6
	<var>::bigint state 7
	<var>::double state 8
  state 6: #2
  state 7: #1
  state 8: #5
  state 9: #6 #7
	<var>::int state 10
	<var>::bigint state 11
  state 10: #6
  state 11: #7
}
def pi = 4.0*atan 1.0;
acosh x/*0:1*/::double = c_acosh x/*0:1*/ if x/*0:1*/>=1.0;
atanh x/*0:1*/::double = c_atanh x/*0:1*/ if abs x/*0:1*/<=1.0;
sinh x/*0:1*/::int = sinh (double x/*0:1*/);
sinh x/*0:1*/::bigint = sinh (double x/*0:1*/);
cosh x/*0:1*/::int = cosh (double x/*0:1*/);
cosh x/*0:1*/::bigint = cosh (double x/*0:1*/);
tanh x/*0:1*/::int = tanh (double x/*0:1*/);
tanh x/*0:1*/::bigint = tanh (double x/*0:1*/);
asinh x/*0:1*/::int = asinh (double x/*0:1*/);
asinh x/*0:1*/::bigint = asinh (double x/*0:1*/);
acosh x/*0:1*/::int = acosh (double x/*0:1*/);
acosh x/*0:1*/::bigint = acosh (double x/*0:1*/);
atanh x/*0:1*/::int = atanh (double x/*0:1*/);
atanh x/*0:1*/::bigint = atanh (double x/*0:1*/);
r/*0:01*/::int<:t/*0:1*/ = -r/*0:01*/<:t/*0:1*/+3.14159265358979 if r/*0:01*/<0;
r/*0:01*/::bigint<:t/*0:1*/ = -r/*0:01*/<:t/*0:1*/+3.14159265358979 if r/*0:01*/<0;
r/*0:01*/::double<:t/*0:1*/ = -r/*0:01*/<:t/*0:1*/+3.14159265358979 if r/*0:01*/<0;
r/*0:01*/<:t/*0:1*/::int = r/*0:01*/<:atan2 (sin t/*0:1*/) (cos t/*0:1*/) if t/*0:1*/<-3.14159265358979||t/*0:1*/>3.14159265358979;
r/*0:01*/<:t/*0:1*/::bigint = r/*0:01*/<:atan2 (sin t/*0:1*/) (cos t/*0:1*/) if t/*0:1*/<-3.14159265358979||t/*0:1*/>3.14159265358979;
r/*0:01*/<:t/*0:1*/::double = r/*0:01*/<:atan2 (sin t/*0:1*/) (cos t/*0:1*/) if t/*0:1*/<-3.14159265358979||t/*0:1*/>3.14159265358979;
r/*0:01*/<:t/*0:1*/::int = r/*0:01*/<:3.14159265358979 if t/*0:1*/==-3.14159265358979;
r/*0:01*/<:t/*0:1*/::bigint = r/*0:01*/<:3.14159265358979 if t/*0:1*/==-3.14159265358979;
r/*0:01*/<:t/*0:1*/::double = r/*0:01*/<:3.14159265358979 if t/*0:1*/==-3.14159265358979;
{
  rule #0: sinh x::int = sinh (double x)
  rule #1: sinh x::bigint = sinh (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: cosh x::int = cosh (double x)
  rule #1: cosh x::bigint = cosh (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: tanh x::int = tanh (double x)
  rule #1: tanh x::bigint = tanh (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: asinh x::int = asinh (double x)
  rule #1: asinh x::bigint = asinh (double x)
  state 0: #0 #1
	<var>::int state 1
	<var>::bigint state 2
  state 1: #0
  state 2: #1
}
{
  rule #0: acosh x::double = c_acosh x if x>=1.0
  rule #1: acosh x::int = acosh (double x)
  rule #2: acosh x::bigint = acosh (double x)
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #1
  state 2: #2
  state 3: #0
}
{
  rule #0: atanh x::double = c_atanh x if abs x<=1.0
  rule #1: atanh x::int = atanh (double x)
  rule #2: atanh x::bigint = atanh (double x)
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
  state 1: #1
  state 2: #2
  state 3: #0
}
{
  rule #0: r::int<:t = -r<:t+3.14159265358979 if r<0
  rule #1: r::bigint<:t = -r<:t+3.14159265358979 if r<0
  rule #2: r::double<:t = -r<:t+3.14159265358979 if r<0
  rule #3: r<:t::int = r<:atan2 (sin t) (cos t) if t<-3.14159265358979||t>3.14159265358979
  rule #4: r<:t::bigint = r<:atan2 (sin t) (cos t) if t<-3.14159265358979||t>3.14159265358979
  rule #5: r<:t::double = r<:atan2 (sin t) (cos t) if t<-3.14159265358979||t>3.14159265358979
  rule #6: r<:t::int = r<:3.14159265358979 if t==-3.14159265358979
  rule #7: r<:t::bigint = r<:3.14159265358979 if t==-3.14159265358979
  rule #8: r<:t::double = r<:3.14159265358979 if t==-3.14159265358979
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8
	<var> state 1
	<var>::int state 5
	<var>::bigint state 10
	<var>::double state 15
  state 1: #3 #4 #5 #6 #7 #8
	<var>::int state 2
	<var>::bigint state 3
	<var>::double state 4
  state 2: #3 #6
  state 3: #4 #7
  state 4: #5 #8
  state 5: #0 #3 #4 #5 #6 #7 #8
	<var> state 6
	<var>::int state 7
	<var>::bigint state 8
	<var>::double state 9
  state 6: #0
  state 7: #0 #3 #6
  state 8: #0 #4 #7
  state 9: #0 #5 #8
  state 10: #1 #3 #4 #5 #6 #7 #8
	<var> state 11
	<var>::int state 12
	<var>::bigint state 13
	<var>::double state 14
  state 11: #1
  state 12: #1 #3 #6
  state 13: #1 #4 #7
  state 14: #1 #5 #8
  state 15: #2 #3 #4 #5 #6 #7 #8
	<var> state 16
	<var>::int state 17
	<var>::bigint state 18
	<var>::double state 19
  state 16: #2
  state 17: #2 #3 #6
  state 18: #2 #4 #7
  state 19: #2 #5 #8
}
def i = 0+:1;
complex z@(x/*0:101*/+:y/*0:11*/) = z/*0:1*/;
complex z@(r/*0:101*/<:t/*0:11*/) = z/*0:1*/;
complex x/*0:1*/::int = x/*0:1*/+:0;
complex x/*0:1*/::bigint = x/*0:1*/+:0;
complex x/*0:1*/::double = x/*0:1*/+:0.0;
polar (x/*0:101*/+:y/*0:11*/) = sqrt (x/*0:101*/*x/*0:101*/+y/*0:11*/*y/*0:11*/)<:atan2 y/*0:11*/ x/*0:101*/;
rect (r/*0:101*/<:t/*0:11*/) = r/*0:101*/*cos t/*0:11*/+:r/*0:101*/*sin t/*0:11*/;
polar x/*0:1*/::int = x/*0:1*/<:0;
polar x/*0:1*/::bigint = x/*0:1*/<:0;
polar x/*0:1*/::double = x/*0:1*/<:0.0;
rect x/*0:1*/::int = x/*0:1*/+:0;
rect x/*0:1*/::bigint = x/*0:1*/+:0;
rect x/*0:1*/::double = x/*0:1*/+:0.0;
cis t/*0:1*/ = rect (1<:t/*0:1*/);
abs (x/*0:101*/+:y/*0:11*/) = sqrt (x/*0:101*/*x/*0:101*/+y/*0:11*/*y/*0:11*/);
abs (r/*0:101*/<:t/*0:11*/) = r/*0:101*/;
arg (x/*0:101*/+:y/*0:11*/) = atan2 y/*0:11*/ x/*0:101*/;
arg (r/*0:101*/<:t/*0:11*/) = t/*0:11*/;
arg x/*0:1*/::int = atan2 0 x/*0:1*/;
arg x/*0:1*/::bigint = atan2 0 x/*0:1*/;
arg x/*0:1*/::double = atan2 0 x/*0:1*/;
re (x/*0:101*/+:y/*0:11*/) = x/*0:101*/;
re (r/*0:101*/<:t/*0:11*/) = r/*0:101*/*sin t/*0:11*/;
re x/*0:1*/::int = x/*0:1*/;
re x/*0:1*/::bigint = x/*0:1*/;
re x/*0:1*/::double = x/*0:1*/;
im (x/*0:101*/+:y/*0:11*/) = y/*0:11*/;
im (r/*0:101*/<:t/*0:11*/) = r/*0:101*/*cos t/*0:11*/;
im x/*0:1*/::int = 0;
im x/*0:1*/::bigint = 0L;
im x/*0:1*/::double = 0.0;
conj (x/*0:101*/+:y/*0:11*/) = x/*0:101*/+:-y/*0:11*/;
conj (r/*0:101*/<:t/*0:11*/) = r/*0:101*/<:-t/*0:11*/;
conj x/*0:1*/::int = x/*0:1*/;
conj x/*0:1*/::bigint = x/*0:1*/;
conj x/*0:1*/::double = x/*0:1*/;
sqrt (x/*0:101*/+:y/*0:11*/) = sqrt (x/*0:101*/*x/*0:101*/+y/*0:11*/*y/*0:11*/)*(cos (t/2)+:sin (t/2));
sqrt (r/*0:101*/<:t/*0:11*/) = sqrt r/*0:101*/<:t/*0:11*//2;
sqrt x/*0:1*/::double = 0.0+:sqrt (-x/*0:1*/) if x/*0:1*/<0;
exp (x/*0:101*/+:y/*0:11*/) = exp x/*0:101*/*(cos y/*0:11*/+:sin y/*0:11*/);
exp (r/*0:101*/<:t/*0:11*/) = exp (r/*0:101*/*cos t/*0:11*/)<:r/*0:101*/*sin t/*0:11*/;
ln z@(x/*0:101*/+:y/*0:11*/) = ln (abs z/*0:1*/)+:arg z/*0:1*/;
ln (r/*0:101*/<:t/*0:11*/) = polar (ln r/*0:101*/+:t/*0:11*/);
log z@(x/*0:101*/+:y/*0:11*/) = ln z/*0:1*//ln 10;
log z@(r/*0:101*/<:t/*0:11*/) = ln z/*0:1*//ln 10;
ln x/*0:1*/::double = ln (abs x/*0:1*/)+:arg x/*0:1*/ if x/*0:1*/<0;
log x/*0:1*/::double = ln x/*0:1*//ln 10 if x/*0:1*/<0;
sin (x/*0:101*/+:y/*0:11*/) = sin x/*0:101*/*cosh y/*0:11*/+:cos x/*0:101*/*sinh y/*0:11*/;
cos (x/*0:101*/+:y/*0:11*/) = cos x/*0:101*/*cosh y/*0:11*/+:-sin x/*0:101*/*sinh y/*0:11*/;
tan (x/*0:101*/+:y/*0:11*/) = (sin (2*x/*0:101*/)+:sinh (2*y/*0:11*/))/(cos (2*x/*0:101*/)+cosh (2*y/*0:11*/));
sin z@(r/*0:101*/<:t/*0:11*/) = polar$sin$rect z/*0:1*/;
cos z@(r/*0:101*/<:t/*0:11*/) = polar$cos$rect z/*0:1*/;
tan z@(r/*0:101*/<:t/*0:11*/) = polar$tan$rect z/*0:1*/;
asin z@(x/*0:101*/+:y/*0:11*/) = -(0+:1)*ln ((0+:1)*z/*0:1*/+sqrt (1-z/*0:1*/*z/*0:1*/));
asin z@(r/*0:101*/<:t/*0:11*/) = -(0+:1)*ln ((0+:1)*z/*0:1*/+sqrt (1-z/*0:1*/*z/*0:1*/));
acos z@(x/*0:101*/+:y/*0:11*/) = -(0+:1)*ln (z/*0:1*/+sqrt (z/*0:1*/*z/*0:1*/-1));
acos z@(r/*0:101*/<:t/*0:11*/) = -(0+:1)*ln (z/*0:1*/+sqrt (z/*0:1*/*z/*0:1*/-1));
atan z@(x/*0:101*/+:y/*0:11*/) = 0.0+:inf if z/*0:1*/==0+:1;
atan z@(r/*0:101*/<:t/*0:11*/) = 0.0+:inf if z/*0:1*/==0+:1;
atan z@(x/*0:101*/+:y/*0:11*/) = 0.0+:-inf if z/*0:1*/==-(0+:1);
atan z@(r/*0:101*/<:t/*0:11*/) = 0.0+:-inf if z/*0:1*/==-(0+:1);
atan z@(x/*0:101*/+:y/*0:11*/) = -(0+:1)*0.5*ln ((1+(0+:1)*z/*0:1*/)/(1-(0+:1)*z/*0:1*/));
atan z@(r/*0:101*/<:t/*0:11*/) = -(0+:1)*0.5*ln ((1+(0+:1)*z/*0:1*/)/(1-(0+:1)*z/*0:1*/));
sinh (x/*0:101*/+:y/*0:11*/) = sinh x/*0:101*/*cos y/*0:11*/+:cosh x/*0:101*/*sin y/*0:11*/;
cosh (x/*0:101*/+:y/*0:11*/) = cosh x/*0:101*/*cos y/*0:11*/+:sinh x/*0:101*/*sin y/*0:11*/;
tanh (x/*0:101*/+:y/*0:11*/) = (sinh (2*x/*0:101*/)+:sin (2*y/*0:11*/))/(cosh (2*x/*0:101*/)+cos (2*y/*0:11*/));
sinh z@(r/*0:101*/<:t/*0:11*/) = polar$sinh$rect z/*0:1*/;
cosh z@(r/*0:101*/<:t/*0:11*/) = polar$cosh$rect z/*0:1*/;
tanh z@(r/*0:101*/<:t/*0:11*/) = polar$tanh$rect z/*0:1*/;
asinh z@(x/*0:101*/+:y/*0:11*/) = ln (z/*0:1*/+sqrt (z/*0:1*/*z/*0:1*/+1));
asinh z@(r/*0:101*/<:t/*0:11*/) = ln (z/*0:1*/+sqrt (z/*0:1*/*z/*0:1*/+1));
acosh z@(x/*0:101*/+:y/*0:11*/) = ln (z/*0:1*/+sqrt (z/*0:1*/*z/*0:1*/-1));
acosh z@(r/*0:101*/<:t/*0:11*/) = ln (z/*0:1*/+sqrt (z/*0:1*/*z/*0:1*/-1));
atanh z@(x/*0:101*/+:y/*0:11*/) = inf+:0.0 if z/*0:1*/==1;
atanh z@(r/*0:101*/<:t/*0:11*/) = inf+:0.0 if z/*0:1*/==1;
atanh z@(x/*0:101*/+:y/*0:11*/) = -inf+:0.0 if z/*0:1*/==-1;
atanh z@(r/*0:101*/<:t/*0:11*/) = -inf+:0.0 if z/*0:1*/==-1;
atanh z@(x/*0:101*/+:y/*0:11*/) = ln ((1+z/*0:1*/)/(1-z/*0:1*/))/2;
atanh z@(r/*0:101*/<:t/*0:11*/) = ln ((1+z/*0:1*/)/(1-z/*0:1*/))/2;
acosh x/*0:1*/::double = acosh (x/*0:1*/+:0);
atanh x/*0:1*/::double = atanh (x/*0:1*/+:0);
-(x/*0:101*/+:y/*0:11*/) = -x/*0:101*/+:-y/*0:11*/;
-(r/*0:101*/<:t/*0:11*/) = r/*0:101*/<:t/*0:11*/+3.14159265358979;
(x1/*0:0101*/+:y1/*0:011*/)+(x2/*0:101*/+:y2/*0:11*/) = x1/*0:0101*/+x2/*0:101*/+:y1/*0:011*/+y2/*0:11*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)+z2@(r2/*0:101*/<:t2/*0:11*/) = polar$rect z1/*0:01*/+rect z2/*0:1*/;
(x1/*0:0101*/+:y1/*0:011*/)-(x2/*0:101*/+:y2/*0:11*/) = x1/*0:0101*/-x2/*0:101*/+:y1/*0:011*/-y2/*0:11*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)-z2@(r2/*0:101*/<:t2/*0:11*/) = polar$rect z1/*0:01*/-rect z2/*0:1*/;
(x1/*0:0101*/+:y1/*0:011*/)*(x2/*0:101*/+:y2/*0:11*/) = x1/*0:0101*/*x2/*0:101*/-y1/*0:011*/*y2/*0:11*/+:x1/*0:0101*/*y2/*0:11*/+y1/*0:011*/*x2/*0:101*/;
(r1/*0:0101*/<:t1/*0:011*/)*(r2/*0:101*/<:t2/*0:11*/) = r1/*0:0101*/*r2/*0:101*/<:t1/*0:011*/+t2/*0:11*/;
(x1/*0:0101*/+:y1/*0:011*/)/(x2/*0:101*/+:y2/*0:11*/) = (x1/*0:0101*/*x2/*0:101*/+y1/*0:011*/*y2/*0:11*/+:y1/*0:011*/*x2/*0:101*/-x1/*0:0101*/*y2/*0:11*/)/(x2/*0:101*/*x2/*0:101*/+y2/*0:11*/*y2/*0:11*/);
(r1/*0:0101*/<:t1/*0:011*/)/(r2/*0:101*/<:t2/*0:11*/) = r1/*0:0101*//r2/*0:101*/<:t1/*0:011*/-t2/*0:11*/;
z1@(x1/*0:0101*/+:y1/*0:011*/)+z2@(r2/*0:101*/<:t2/*0:11*/) = z1/*0:01*/+rect z2/*0:1*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)+z2@(x2/*0:101*/+:y2/*0:11*/) = rect z1/*0:01*/+z2/*0:1*/;
z1@(x1/*0:0101*/+:y1/*0:011*/)-z2@(r2/*0:101*/<:t2/*0:11*/) = z1/*0:01*/-rect z2/*0:1*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)-z2@(x2/*0:101*/+:y2/*0:11*/) = rect z1/*0:01*/-z2/*0:1*/;
z1@(x1/*0:0101*/+:y1/*0:011*/)*z2@(r2/*0:101*/<:t2/*0:11*/) = z1/*0:01*/*rect z2/*0:1*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)*z2@(x2/*0:101*/+:y2/*0:11*/) = rect z1/*0:01*/*z2/*0:1*/;
z1@(x1/*0:0101*/+:y1/*0:011*/)/z2@(r2/*0:101*/<:t2/*0:11*/) = z1/*0:01*//rect z2/*0:1*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)/z2@(x2/*0:101*/+:y2/*0:11*/) = rect z1/*0:01*//z2/*0:1*/;
(x1/*0:0101*/+:y1/*0:011*/)+x2/*0:1*/ = x1/*0:0101*/+x2/*0:1*/+:y1/*0:011*/;
x1/*0:01*/+(x2/*0:101*/+:y2/*0:11*/) = x1/*0:01*/+x2/*0:101*/+:y2/*0:11*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)+x2/*0:1*/ = rect z1/*0:01*/+x2/*0:1*/;
x1/*0:01*/+z2@(r2/*0:101*/<:t2/*0:11*/) = x1/*0:01*/+rect z2/*0:1*/;
(x1/*0:0101*/+:y1/*0:011*/)-x2/*0:1*/ = x1/*0:0101*/-x2/*0:1*/+:y1/*0:011*/;
x1/*0:01*/-(x2/*0:101*/+:y2/*0:11*/) = x1/*0:01*/-x2/*0:101*/+:-y2/*0:11*/;
z1@(r1/*0:0101*/<:t1/*0:011*/)-x2/*0:1*/ = rect z1/*0:01*/-x2/*0:1*/;
x1/*0:01*/-z2@(r2/*0:101*/<:t2/*0:11*/) = x1/*0:01*/-rect z2/*0:1*/;
(x1/*0:0101*/+:y1/*0:011*/)*x2/*0:1*/ = x1/*0:0101*/*x2/*0:1*/+:y1/*0:011*/*x2/*0:1*/;
x1/*0:01*/*(x2/*0:101*/+:y2/*0:11*/) = x1/*0:01*/*x2/*0:101*/+:x1/*0:01*/*y2/*0:11*/;
(r1/*0:0101*/<:t1/*0:011*/)*x2/*0:1*/ = r1/*0:0101*/*x2/*0:1*/<:t1/*0:011*/;
x1/*0:01*/*(r2/*0:101*/<:t2/*0:11*/) = x1/*0:01*/*r2/*0:101*/<:t2/*0:11*/;
(x1/*0:0101*/+:y1/*0:011*/)/x2/*0:1*/ = x1/*0:0101*//x2/*0:1*/+:y1/*0:011*//x2/*0:1*/;
x1/*0:01*//z2@(x2/*0:101*/+:y2/*0:11*/) = (x1/*0:01*/*x2/*0:101*/+:-x1/*0:01*/*y2/*0:11*/)/(x2/*0:101*/*x2/*0:101*/+y2/*0:11*/*y2/*0:11*/);
(r1/*0:0101*/<:t1/*0:011*/)/x2/*0:1*/ = r1/*0:0101*//x2/*0:1*/<:t1/*0:011*/;
x1/*0:01*//(r2/*0:101*/<:t2/*0:11*/) = x1/*0:01*//r2/*0:101*/<:-t2/*0:11*/;
z1@(x1/*0:0101*/+:y1/*0:011*/)^z2@(x2/*0:101*/+:y2/*0:11*/) = polar z1/*0:01*/^z2/*0:1*/;
z1@(x1/*0:0101*/+:y1/*0:011*/)^z2@(r2/*0:101*/<:t2/*0:11*/) = polar z1/*0:01*/^rect z2/*0:1*/;
(r1/*0:0101*/<:t1/*0:011*/)^z2@(x2/*0:101*/+:y2/*0:11*/) = exp (ln r1/*0:0101*/*z2/*0:1*/)*exp ((0+:t1/*0:011*/)*z2/*0:1*/);
(r1/*0:0101*/<:t1/*0:011*/)^z2@(r2/*0:101*/<:t2/*0:11*/) = exp (ln r1/*0:0101*/*z2/*0:1*/)*exp ((0+:t1/*0:011*/)*z2/*0:1*/);
z1@(x1/*0:0101*/+:y1/*0:011*/)^x2/*0:1*/ = z1/*0:01*/^(x2/*0:1*/+:0);
x1/*0:01*/^z2@(x2/*0:101*/+:y2/*0:11*/) = (x1/*0:01*/+:0)^z2/*0:1*/;
(r1/*0:0101*/<:t1/*0:011*/)^x2/*0:1*/ = r1/*0:0101*/^x2/*0:1*/<:t1/*0:011*/*x2/*0:1*/;
x1/*0:01*/^z2@(r2/*0:101*/<:t2/*0:11*/) = (x1/*0:01*/<:0)^z2/*0:1*/;
x1/*0:01*/::double^x2/*0:1*/::double = exp (ln x1/*0:01*/*x2/*0:1*/) if x1/*0:01*/<0;
x1/*0:0101*/+:y1/*0:011*/==x2/*0:101*/+:y2/*0:11*/ = x1/*0:0101*/==x2/*0:101*/&&y1/*0:011*/==y2/*0:11*/;
r1/*0:0101*/<:t1/*0:011*/==r2/*0:101*/<:t2/*0:11*/ = r1/*0:0101*/==r2/*0:101*/&&t1/*0:011*/==t2/*0:11*/;
x1/*0:0101*/+:y1/*0:011*/!=x2/*0:101*/+:y2/*0:11*/ = x1/*0:0101*/!=x2/*0:101*/||y1/*0:011*/!=y2/*0:11*/;
r1/*0:0101*/<:t1/*0:011*/!=r2/*0:101*/<:t2/*0:11*/ = r1/*0:0101*/!=r2/*0:101*/||t1/*0:011*/!=t2/*0:11*/;
z1@(_/*0:0101*/+:_/*0:011*/)==z2@(_/*0:101*/<:_/*0:11*/) = z1/*0:01*/==rect z2/*0:1*/;
z1@(_/*0:0101*/<:_/*0:011*/)==z2@(_/*0:101*/+:_/*0:11*/) = rect z1/*0:01*/==z2/*0:1*/;
z1@(_/*0:0101*/+:_/*0:011*/)!=z2@(_/*0:101*/<:_/*0:11*/) = z1/*0:01*/!=rect z2/*0:1*/;
z1@(_/*0:0101*/<:_/*0:011*/)!=z2@(_/*0:101*/+:_/*0:11*/) = rect z1/*0:01*/!=z2/*0:1*/;
x1/*0:0101*/+:y1/*0:011*/==x2/*0:1*/ = x1/*0:0101*/==x2/*0:1*/&&y1/*0:011*/==0;
x1/*0:01*/==x2/*0:101*/+:y2/*0:11*/ = x1/*0:01*/==x2/*0:101*/&&y2/*0:11*/==0;
z1@(r1/*0:0101*/<:t1/*0:011*/)==x2/*0:1*/ = z1/*0:01*/==x2/*0:1*/<:0;
x1/*0:01*/==z2@(r2/*0:101*/<:t2/*0:11*/) = x1/*0:01*/<:0==z2/*0:1*/;
x1/*0:0101*/+:y1/*0:011*/!=x2/*0:1*/ = x1/*0:0101*/!=x2/*0:1*/||y1/*0:011*/!=0;
x1/*0:01*/!=x2/*0:101*/+:y2/*0:11*/ = x1/*0:01*/!=x2/*0:101*/||y2/*0:11*/!=0;
z1@(r1/*0:0101*/<:t1/*0:011*/)!=x2/*0:1*/ = z1/*0:01*/!=x2/*0:1*/<:0;
x1/*0:01*/!=z2@(r2/*0:101*/<:t2/*0:11*/) = x1/*0:01*/<:0!=z2/*0:1*/;
x/*0:01*/::bigint%0L = x/*0:01*//0;
x/*0:01*/::bigint%y/*0:1*/::bigint = (-x/*0:01*/)%(-y/*0:1*/) if y/*0:1*/<0;
x/*0:01*/::bigint%y/*0:1*/::bigint = x/*1:01*/ div d/*0:*/%(y/*1:1*/ div d/*0:*/) when d/*0:*/ = gcd x/*0:01*/ y/*0:1*/ {
  rule #0: d = gcd x y
  state 0: #0
	<var> state 1
  state 1: #0
} end if gcd x/*0:01*/ y/*0:1*/>1;
x/*0:01*/::int%y/*0:1*/::bigint = bigint x/*0:01*/%y/*0:1*/;
x/*0:01*/::bigint%y/*0:1*/::int = x/*0:01*/%bigint y/*0:1*/;
x/*0:01*/::int%y/*0:1*/::int = bigint x/*0:01*/%bigint y/*0:1*/;
x1/*0:0101*/%y1/*0:011*/%(x2/*0:101*/%y2/*0:11*/) = x1/*0:0101*/*y2/*0:11*/%(y1/*0:011*/*x2/*0:101*/);
x1/*0:0101*/%y1/*0:011*/%x2/*0:1*/ = x1/*0:0101*/%(y1/*0:011*/*x2/*0:1*/);
x1/*0:01*/%(x2/*0:101*/%y2/*0:11*/) = x1/*0:01*/*y2/*0:11*/%x2/*0:101*/;
z1@(_/*0:0101*/+:_/*0:011*/)%z2@(_/*0:101*/<:_/*0:11*/) = z1/*0:01*//z2/*0:1*/;
z1@(_/*0:0101*/<:_/*0:011*/)%z2@(_/*0:101*/+:_/*0:11*/) = z1/*0:01*//z2/*0:1*/;
(x1/*0:0101*/+:y1/*0:011*/)%(x2/*0:101*/+:y2/*0:11*/) = (x1/*1:0101*/*x2/*1:101*/+y1/*1:011*/*y2/*1:11*/)%d/*0:*/+:(y1/*1:011*/*x2/*1:101*/-x1/*1:0101*/*y2/*1:11*/)%d/*0:*/ when d/*0:*/ = x2/*0:101*/*x2/*0:101*/+y2/*0:11*/*y2/*0:11*/ {
  rule #0: d = x2*x2+y2*y2
  state 0: #0
	<var> state 1
  state 1: #0
} end;
(x1/*0:0101*/+:y1/*0:011*/)%x2/*0:1*/ = x1/*1:0101*/*x2/*1:1*/%d/*0:*/+:y1/*1:011*/*x2/*1:1*/%d/*0:*/ when d/*0:*/ = x2/*0:1*/*x2/*0:1*/ {
  rule #0: d = x2*x2
  state 0: #0
	<var> state 1
  state 1: #0
} end;
x1/*0:01*/%(x2/*0:101*/+:y2/*0:11*/) = x1/*1:01*/*x2/*1:101*/%d/*0:*/+:(-x1/*1:01*/*y2/*1:11*/)%d/*0:*/ when d/*0:*/ = x2/*0:101*/*x2/*0:101*/+y2/*0:11*/*y2/*0:11*/ {
  rule #0: d = x2*x2+y2*y2
  state 0: #0
	<var> state 1
  state 1: #0
} end;
(r1/*0:0101*/<:t1/*0:011*/)%(r2/*0:101*/<:t2/*0:11*/) = r1/*0:0101*/%r2/*0:101*/<:t1/*0:011*/-t2/*0:11*/;
(r1/*0:0101*/<:t1/*0:011*/)%x2/*0:1*/ = r1/*0:0101*/%x2/*0:1*/<:t1/*0:011*/;
x1/*0:01*/%(r2/*0:101*/<:t2/*0:11*/) = x1/*0:01*/%r2/*0:101*/<:-t2/*0:11*/;
x/*0:01*/::double%y/*0:1*/ = x/*0:01*//y/*0:1*/;
x/*0:01*/%y/*0:1*/::double = x/*0:01*//y/*0:1*/;
rational x@(_/*0:101*/%_/*0:11*/) = x/*0:1*/;
rational x/*0:1*/::int = x/*0:1*/%1;
rational x/*0:1*/::bigint = x/*0:1*/%1;
rational x/*0:1*/::double = x/*0:1*/;
rational (x/*0:101*/+:y/*0:11*/) = rational x/*0:101*/+:rational y/*0:11*/;
rational (x/*0:101*/<:y/*0:11*/) = rational x/*0:101*/<:rational y/*0:11*/;
int x@(_/*0:101*/%_/*0:11*/) = int (bigint x/*0:1*/);
bigint x@(_/*0:101*/%_/*0:11*/) = trunc x/*0:1*/;
double (x/*0:101*/%y/*0:11*/) = x/*0:101*//y/*0:11*/;
complex (x/*0:101*/%y/*0:11*/) = x/*0:101*/%y/*0:11*/+:0L%1L;
rect (x/*0:101*/%y/*0:11*/) = x/*0:101*/%y/*0:11*/+:0L%1L;
polar (x/*0:101*/%y/*0:11*/) = x/*0:101*/%y/*0:11*/<:0L%1L;
r@(_/*0:0101*/%_/*0:011*/)<:t/*0:1*/ = -r/*0:01*/<:t/*0:1*/+3.14159265358979 if r/*0:01*/<0;
r/*0:01*/<:t@(_/*0:101*/%_/*0:11*/) = r/*0:01*/<:atan2 (sin t/*0:1*/) (cos t/*0:1*/) if t/*0:1*/<-3.14159265358979||t/*0:1*/>3.14159265358979;
r/*0:01*/<:t@(_/*0:101*/%_/*0:11*/) = r/*0:01*/<:3.14159265358979 if t/*0:1*/==-3.14159265358979;
num (x/*0:101*/%y/*0:11*/) = x/*0:101*/;
den (x/*0:101*/%y/*0:11*/) = y/*0:11*/;
num x/*0:1*/::int = x/*0:1*/;
num x/*0:1*/::bigint = x/*0:1*/;
den x/*0:1*/::int = 1;
den x/*0:1*/::bigint = 1;
abs (x/*0:101*/%y/*0:11*/) = abs x/*0:101*/%y/*0:11*/;
sgn (x/*0:101*/%y/*0:11*/) = sgn x/*0:101*/;
floor x@(_/*0:101*/%_/*0:11*/) = if n/*0:*/<=x/*1:1*/ then n/*0:*/ else n/*0:*/-1 when n/*0:*/::bigint = trunc x/*0:1*/ {
  rule #0: n::bigint = trunc x
  state 0: #0
	<var>::bigint state 1
  state 1: #0
} end;
ceil x@(_/*0:101*/%_/*0:11*/) = -floor (-x/*0:1*/);
round (x/*0:101*/%y/*0:11*/) = -round ((-x/*0:101*/)%y/*0:11*/) if x/*0:101*/<0;
round (x/*0:101*/%y/*0:11*/) = x/*0:101*/ div 2+1 if y/*0:11*/==2;
round (x/*0:101*/%y/*0:11*/) = (2*x/*0:101*/+y/*0:11*/) div (2*y/*0:11*/);
trunc (x/*0:101*/%y/*0:11*/) = x/*0:101*/ div y/*0:11*/;
frac x@(_/*0:101*/%_/*0:11*/) = x/*0:1*/-trunc x/*0:1*/;
pow (x/*0:0101*/%y/*0:011*/) n/*0:1*/::int = pow x/*0:0101*/ n/*0:1*/%pow y/*0:011*/ n/*0:1*/ if n/*0:1*/>0;
pow (x/*0:0101*/%y/*0:011*/) n/*0:1*/::bigint = pow x/*0:0101*/ n/*0:1*/%pow y/*0:011*/ n/*0:1*/ if n/*0:1*/>0;
pow (x/*0:0101*/%y/*0:011*/) n/*0:1*/::int = pow y/*0:011*/ (-n/*0:1*/)%pow x/*0:0101*/ (-n/*0:1*/) if n/*0:1*/<0;
pow (x/*0:0101*/%y/*0:011*/) n/*0:1*/::bigint = pow y/*0:011*/ (-n/*0:1*/)%pow x/*0:0101*/ (-n/*0:1*/) if n/*0:1*/<0;
pow (x/*0:0101*/%y/*0:011*/) n/*0:1*/::int = 1L%1L;
pow (x/*0:0101*/%y/*0:011*/) n/*0:1*/::bigint = 1L%1L;
pow (x/*0:0101*/%y/*0:011*/) n/*0:1*/::double = pow (x/*0:0101*//y/*0:011*/) n/*0:1*/;
pow (x/*0:0101*/%y/*0:011*/) (n/*0:101*/%m/*0:11*/) = pow (x/*0:0101*//y/*0:011*/) (n/*0:101*//m/*0:11*/);
pow x/*0:01*/::int n/*0:1*/::int = 1%pow x/*0:01*/ (-n/*0:1*/) if n/*0:1*/<0;
pow x/*0:01*/::int n/*0:1*/::bigint = 1%pow x/*0:01*/ (-n/*0:1*/) if n/*0:1*/<0;
pow x/*0:01*/::bigint n/*0:1*/::int = 1%pow x/*0:01*/ (-n/*0:1*/) if n/*0:1*/<0;
pow x/*0:01*/::bigint n/*0:1*/::bigint = 1%pow x/*0:01*/ (-n/*0:1*/) if n/*0:1*/<0;
sqrt (x/*0:101*/%y/*0:11*/) = sqrt (x/*0:101*//y/*0:11*/);
exp (x/*0:101*/%y/*0:11*/) = exp (x/*0:101*//y/*0:11*/);
ln (x/*0:101*/%y/*0:11*/) = ln (x/*0:101*//y/*0:11*/);
log (x/*0:101*/%y/*0:11*/) = log (x/*0:101*//y/*0:11*/);
sin (x/*0:101*/%y/*0:11*/) = sin (x/*0:101*//y/*0:11*/);
cos (x/*0:101*/%y/*0:11*/) = cos (x/*0:101*//y/*0:11*/);
tan (x/*0:101*/%y/*0:11*/) = tan (x/*0:101*//y/*0:11*/);
asin (x/*0:101*/%y/*0:11*/) = asin (x/*0:101*//y/*0:11*/);
acos (x/*0:101*/%y/*0:11*/) = acos (x/*0:101*//y/*0:11*/);
atan (x/*0:101*/%y/*0:11*/) = atan (x/*0:101*//y/*0:11*/);
atan2 (x/*0:0101*/%y/*0:011*/) z/*0:1*/ = atan2 (x/*0:0101*//y/*0:011*/) z/*0:1*/;
atan2 x/*0:01*/ (y/*0:101*/%z/*0:11*/) = atan2 x/*0:01*/ (y/*0:101*//z/*0:11*/);
sinh (x/*0:101*/%y/*0:11*/) = sinh (x/*0:101*//y/*0:11*/);
cosh (x/*0:101*/%y/*0:11*/) = cosh (x/*0:101*//y/*0:11*/);
tanh (x/*0:101*/%y/*0:11*/) = tanh (x/*0:101*//y/*0:11*/);
asinh (x/*0:101*/%y/*0:11*/) = asinh (x/*0:101*//y/*0:11*/);
acosh (x/*0:101*/%y/*0:11*/) = acosh (x/*0:101*//y/*0:11*/);
atanh (x/*0:101*/%y/*0:11*/) = atanh (x/*0:101*//y/*0:11*/);
-x/*0:101*/%y/*0:11*/ = (-x/*0:101*/)%y/*0:11*/;
x1/*0:0101*/%y1/*0:011*/+x2/*0:101*/%y2/*0:11*/ = (x1/*0:0101*/*y2/*0:11*/+x2/*0:101*/*y1/*0:011*/)%(y1/*0:011*/*y2/*0:11*/);
x1/*0:0101*/%y1/*0:011*/-x2/*0:101*/%y2/*0:11*/ = (x1/*0:0101*/*y2/*0:11*/-x2/*0:101*/*y1/*0:011*/)%(y1/*0:011*/*y2/*0:11*/);
x1/*0:0101*/%y1/*0:011*/*(x2/*0:101*/%y2/*0:11*/) = x1/*0:0101*/*x2/*0:101*/%(y1/*0:011*/*y2/*0:11*/);
x1/*0:0101*/%y1/*0:011*/+x2/*0:1*/ = (x1/*0:0101*/+x2/*0:1*/*y1/*0:011*/)%y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/-x2/*0:1*/ = (x1/*0:0101*/-x2/*0:1*/*y1/*0:011*/)%y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/*x2/*0:1*/ = x1/*0:0101*/*x2/*0:1*/%y1/*0:011*/;
x1/*0:01*/+x2/*0:101*/%y2/*0:11*/ = (x1/*0:01*/*y2/*0:11*/+x2/*0:101*/)%y2/*0:11*/;
x1/*0:01*/-x2/*0:101*/%y2/*0:11*/ = (x1/*0:01*/*y2/*0:11*/-x2/*0:101*/)%y2/*0:11*/;
x1/*0:01*/*(x2/*0:101*/%y2/*0:11*/) = x1/*0:01*/*x2/*0:101*/%y2/*0:11*/;
x1/*0:0101*/%y1/*0:011*//(x2/*0:101*/%y2/*0:11*/) = x1/*0:0101*/*y2/*0:11*//(y1/*0:011*/*x2/*0:101*/);
(x1/*0:0101*/%y1/*0:011*/)^(x2/*0:101*/%y2/*0:11*/) = (x1/*0:0101*//y1/*0:011*/)^(x2/*0:101*//y2/*0:11*/);
x1/*0:0101*/%y1/*0:011*//x2/*0:1*/ = x1/*0:0101*//(y1/*0:011*/*x2/*0:1*/);
(x1/*0:0101*/%y1/*0:011*/)^x2/*0:1*/ = (x1/*0:0101*//y1/*0:011*/)^x2/*0:1*/;
x1/*0:01*//(x2/*0:101*/%y2/*0:11*/) = x1/*0:01*/*y2/*0:11*//x2/*0:101*/;
x1/*0:01*/^(x2/*0:101*/%y2/*0:11*/) = x1/*0:01*/^(x2/*0:101*//y2/*0:11*/);
x1/*0:0101*/%y1/*0:011*/==x2/*0:101*/%y2/*0:11*/ = x1/*0:0101*/*y2/*0:11*/==x2/*0:101*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/!=x2/*0:101*/%y2/*0:11*/ = x1/*0:0101*/*y2/*0:11*/!=x2/*0:101*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/<x2/*0:101*/%y2/*0:11*/ = x1/*0:0101*/*y2/*0:11*/<x2/*0:101*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/<=x2/*0:101*/%y2/*0:11*/ = x1/*0:0101*/*y2/*0:11*/<=x2/*0:101*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/>x2/*0:101*/%y2/*0:11*/ = x1/*0:0101*/*y2/*0:11*/>x2/*0:101*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/>=x2/*0:101*/%y2/*0:11*/ = x1/*0:0101*/*y2/*0:11*/>=x2/*0:101*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/==x2/*0:1*/ = x1/*0:0101*/==x2/*0:1*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/!=x2/*0:1*/ = x1/*0:0101*/!=x2/*0:1*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/<x2/*0:1*/ = x1/*0:0101*/<x2/*0:1*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/<=x2/*0:1*/ = x1/*0:0101*/<=x2/*0:1*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/>x2/*0:1*/ = x1/*0:0101*/>x2/*0:1*/*y1/*0:011*/;
x1/*0:0101*/%y1/*0:011*/>=x2/*0:1*/ = x1/*0:0101*/>=x2/*0:1*/*y1/*0:011*/;
x1/*0:01*/==x2/*0:101*/%y2/*0:11*/ = x1/*0:01*/*y2/*0:11*/==x2/*0:101*/;
x1/*0:01*/!=x2/*0:101*/%y2/*0:11*/ = x1/*0:01*/*y2/*0:11*/!=x2/*0:101*/;
x1/*0:01*/<x2/*0:101*/%y2/*0:11*/ = x1/*0:01*/*y2/*0:11*/<x2/*0:101*/;
x1/*0:01*/<=x2/*0:101*/%y2/*0:11*/ = x1/*0:01*/*y2/*0:11*/<=x2/*0:101*/;
x1/*0:01*/>x2/*0:101*/%y2/*0:11*/ = x1/*0:01*/*y2/*0:11*/>x2/*0:101*/;
x1/*0:01*/>=x2/*0:101*/%y2/*0:11*/ = x1/*0:01*/*y2/*0:11*/>=x2/*0:101*/;
complexp x/*0:1*/ = case x/*0:1*/ of x/*0:01*/+:y/*0:1*/ = realp x/*0:01*/&&realp y/*0:1*/; x/*0:01*/<:y/*0:1*/ = realp x/*0:01*/&&realp y/*0:1*/; _/*0:*/ = 0 {
  rule #0: x+:y = realp x&&realp y
  rule #1: x<:y = realp x&&realp y
  rule #2: _ = 0
  state 0: #0 #1 #2
	<var> state 1
	<app> state 2
  state 1: #2
  state 2: #0 #1 #2
	<var> state 3
	<app> state 5
  state 3: #2
	<var> state 4
  state 4: #2
  state 5: #0 #1 #2
	<var> state 6
	+: state 9
	<: state 12
  state 6: #2
	<var> state 7
  state 7: #2
	<var> state 8
  state 8: #2
  state 9: #0 #2
	<var> state 10
  state 10: #0 #2
	<var> state 11
  state 11: #0 #2
  state 12: #1 #2
	<var> state 13
  state 13: #1 #2
	<var> state 14
  state 14: #1 #2
} end;
rationalp x/*0:1*/ = case x/*0:1*/ of x/*0:01*/%y/*0:1*/ = bigintp x/*0:01*/&&bigintp y/*0:1*/; _/*0:*/ = 0 {
  rule #0: x%y = bigintp x&&bigintp y
  rule #1: _ = 0
  state 0: #0 #1
	<var> state 1
	<app> state 2
  state 1: #1
  state 2: #0 #1
	<var> state 3
	<app> state 5
  state 3: #1
	<var> state 4
  state 4: #1
  state 5: #0 #1
	<var> state 6
	% state 9
  state 6: #1
	<var> state 7
  state 7: #1
	<var> state 8
  state 8: #1
  state 9: #0 #1
	<var> state 10
  state 10: #0 #1
	<var> state 11
  state 11: #0 #1
} end;
realp x/*0:1*/ = intp x/*0:1*/||bigintp x/*0:1*/||doublep x/*0:1*/||rationalp x/*0:1*/;
numberp x/*0:1*/ = realp x/*0:1*/||complexp x/*0:1*/;
exactp x/*0:1*/ = intp x/*0:1*/||bigintp x/*0:1*/||rationalp||complexp x/*0:1*/&&exactp (re x/*0:1*/)&&exactp (im x/*0:1*/) if numberp x/*0:1*/;
infp x/*0:1*/::double = not nanp x/*0:1*/&&nanp (x/*0:1*/-x/*0:1*/);
nanp x/*0:1*/::double = x/*0:1*/===nan;
{
  rule #0: x::int<y::int = x<y
  rule #1: x::double<y::double = x<y
  rule #2: x::int<y::double = x<y
  rule #3: x::double<y::int = x<y
  rule #4: x::bigint<y::bigint = bigint_cmp x y<0
  rule #5: x::int<y::bigint = bigint x<y
  rule #6: x::bigint<y::int = x<bigint y
  rule #7: x::bigint<y::double = double x<y
  rule #8: x::double<y::bigint = x<double y
  rule #9: x<y = bigint x<bigint y
  rule #10: x::string<y::string = strcmp x y<0
  rule #11: x1%y1<x2%y2 = x1*y2<x2*y1
  rule #12: x1%y1<x2 = x1<x2*y1
  rule #13: x1<x2%y2 = x1*y2<x2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13
	<var> state 1
	<var>::int state 7
	<var>::bigint state 16
	<var>::double state 25
	<var>::string state 34
	<var> state 41
	<app> state 48
  state 1: #13
	<app> state 2
  state 2: #13
	<app> state 3
  state 3: #13
	% state 4
  state 4: #13
	<var> state 5
  state 5: #13
	<var> state 6
  state 6: #13
  state 7: #0 #2 #5 #13
	<var>::int state 8
	<var>::bigint state 9
	<var>::double state 10
	<app> state 11
  state 8: #0
  state 9: #5
  state 10: #2
  state 11: #13
	<app> state 12
  state 12: #13
	% state 13
  state 13: #13
	<var> state 14
  state 14: #13
	<var> state 15
  state 15: #13
  state 16: #4 #6 #7 #13
	<var>::int state 17
	<var>::bigint state 18
	<var>::double state 19
	<app> state 20
  state 17: #6
  state 18: #4
  state 19: #7
  state 20: #13
	<app> state 21
  state 21: #13
	% state 22
  state 22: #13
	<var> state 23
  state 23: #13
	<var> state 24
  state 24: #13
  state 25: #1 #3 #8 #13
	<var>::int state 26
	<var>::bigint state 27
	<var>::double state 28
	<app> state 29
  state 26: #3
  state 27: #8
  state 28: #1
  state 29: #13
	<app> state 30
  state 30: #13
	% state 31
  state 31: #13
	<var> state 32
  state 32: #13
	<var> state 33
  state 33: #13
  state 34: #10 #13
	<var>::string state 35
	<app> state 36
  state 35: #10
  state 36: #13
	<app> state 37
  state 37: #13
	% state 38
  state 38: #13
	<var> state 39
  state 39: #13
	<var> state 40
  state 40: #13
  state 41: #9 #13
	<var> state 42
	<app> state 43
  state 42: #9
  state 43: #13
	<app> state 44
  state 44: #13
	% state 45
  state 45: #13
	<var> state 46
  state 46: #13
	<var> state 47
  state 47: #13
  state 48: #11 #12 #13
	<var> state 49
	<app> state 56
  state 49: #13
	<var> state 50
  state 50: #13
	<app> state 51
  state 51: #13
	<app> state 52
  state 52: #13
	% state 53
  state 53: #13
	<var> state 54
  state 54: #13
	<var> state 55
  state 55: #13
  state 56: #11 #12 #13
	<var> state 57
	% state 65
  state 57: #13
	<var> state 58
  state 58: #13
	<var> state 59
  state 59: #13
	<app> state 60
  state 60: #13
	<app> state 61
  state 61: #13
	% state 62
  state 62: #13
	<var> state 63
  state 63: #13
	<var> state 64
  state 64: #13
  state 65: #11 #12 #13
	<var> state 66
  state 66: #11 #12 #13
	<var> state 67
  state 67: #11 #12 #13
	<var> state 68
	<app> state 69
  state 68: #12
  state 69: #11 #12 #13
	<var> state 70
	<app> state 72
  state 70: #12
	<var> state 71
  state 71: #12
  state 72: #11 #12 #13
	<var> state 73
	% state 76
  state 73: #12
	<var> state 74
  state 74: #12
	<var> state 75
  state 75: #12
  state 76: #11 #12 #13
	<var> state 77
  state 77: #11 #12 #13
	<var> state 78
  state 78: #11 #12 #13
}
{
  rule #0: x::int>y::int = x>y
  rule #1: x::double>y::double = x>y
  rule #2: x::int>y::double = x>y
  rule #3: x::double>y::int = x>y
  rule #4: x::bigint>y::bigint = bigint_cmp x y>0
  rule #5: x::int>y::bigint = bigint x>y
  rule #6: x::bigint>y::int = x>bigint y
  rule #7: x::bigint>y::double = double x>y
  rule #8: x::double>y::bigint = x>double y
  rule #9: x>y = bigint x>bigint y
  rule #10: x::string>y::string = strcmp x y>0
  rule #11: x1%y1>x2%y2 = x1*y2>x2*y1
  rule #12: x1%y1>x2 = x1>x2*y1
  rule #13: x1>x2%y2 = x1*y2>x2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13
	<var> state 1
	<var>::int state 7
	<var>::bigint state 16
	<var>::double state 25
	<var>::string state 34
	<var> state 41
	<app> state 48
  state 1: #13
	<app> state 2
  state 2: #13
	<app> state 3
  state 3: #13
	% state 4
  state 4: #13
	<var> state 5
  state 5: #13
	<var> state 6
  state 6: #13
  state 7: #0 #2 #5 #13
	<var>::int state 8
	<var>::bigint state 9
	<var>::double state 10
	<app> state 11
  state 8: #0
  state 9: #5
  state 10: #2
  state 11: #13
	<app> state 12
  state 12: #13
	% state 13
  state 13: #13
	<var> state 14
  state 14: #13
	<var> state 15
  state 15: #13
  state 16: #4 #6 #7 #13
	<var>::int state 17
	<var>::bigint state 18
	<var>::double state 19
	<app> state 20
  state 17: #6
  state 18: #4
  state 19: #7
  state 20: #13
	<app> state 21
  state 21: #13
	% state 22
  state 22: #13
	<var> state 23
  state 23: #13
	<var> state 24
  state 24: #13
  state 25: #1 #3 #8 #13
	<var>::int state 26
	<var>::bigint state 27
	<var>::double state 28
	<app> state 29
  state 26: #3
  state 27: #8
  state 28: #1
  state 29: #13
	<app> state 30
  state 30: #13
	% state 31
  state 31: #13
	<var> state 32
  state 32: #13
	<var> state 33
  state 33: #13
  state 34: #10 #13
	<var>::string state 35
	<app> state 36
  state 35: #10
  state 36: #13
	<app> state 37
  state 37: #13
	% state 38
  state 38: #13
	<var> state 39
  state 39: #13
	<var> state 40
  state 40: #13
  state 41: #9 #13
	<var> state 42
	<app> state 43
  state 42: #9
  state 43: #13
	<app> state 44
  state 44: #13
	% state 45
  state 45: #13
	<var> state 46
  state 46: #13
	<var> state 47
  state 47: #13
  state 48: #11 #12 #13
	<var> state 49
	<app> state 56
  state 49: #13
	<var> state 50
  state 50: #13
	<app> state 51
  state 51: #13
	<app> state 52
  state 52: #13
	% state 53
  state 53: #13
	<var> state 54
  state 54: #13
	<var> state 55
  state 55: #13
  state 56: #11 #12 #13
	<var> state 57
	% state 65
  state 57: #13
	<var> state 58
  state 58: #13
	<var> state 59
  state 59: #13
	<app> state 60
  state 60: #13
	<app> state 61
  state 61: #13
	% state 62
  state 62: #13
	<var> state 63
  state 63: #13
	<var> state 64
  state 64: #13
  state 65: #11 #12 #13
	<var> state 66
  state 66: #11 #12 #13
	<var> state 67
  state 67: #11 #12 #13
	<var> state 68
	<app> state 69
  state 68: #12
  state 69: #11 #12 #13
	<var> state 70
	<app> state 72
  state 70: #12
	<var> state 71
  state 71: #12
  state 72: #11 #12 #13
	<var> state 73
	% state 76
  state 73: #12
	<var> state 74
  state 74: #12
	<var> state 75
  state 75: #12
  state 76: #11 #12 #13
	<var> state 77
  state 77: #11 #12 #13
	<var> state 78
  state 78: #11 #12 #13
}
{
  rule #0: x::int<=y::int = x<=y
  rule #1: x::double<=y::double = x<=y
  rule #2: x::int<=y::double = x<=y
  rule #3: x::double<=y::int = x<=y
  rule #4: x::bigint<=y::bigint = bigint_cmp x y<=0
  rule #5: x::int<=y::bigint = bigint x<=y
  rule #6: x::bigint<=y::int = x<=bigint y
  rule #7: x::bigint<=y::double = double x<=y
  rule #8: x::double<=y::bigint = x<=double y
  rule #9: x<=y = bigint x<=bigint y
  rule #10: x::string<=y::string = strcmp x y<=0
  rule #11: x1%y1<=x2%y2 = x1*y2<=x2*y1
  rule #12: x1%y1<=x2 = x1<=x2*y1
  rule #13: x1<=x2%y2 = x1*y2<=x2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13
	<var> state 1
	<var>::int state 7
	<var>::bigint state 16
	<var>::double state 25
	<var>::string state 34
	<var> state 41
	<app> state 48
  state 1: #13
	<app> state 2
  state 2: #13
	<app> state 3
  state 3: #13
	% state 4
  state 4: #13
	<var> state 5
  state 5: #13
	<var> state 6
  state 6: #13
  state 7: #0 #2 #5 #13
	<var>::int state 8
	<var>::bigint state 9
	<var>::double state 10
	<app> state 11
  state 8: #0
  state 9: #5
  state 10: #2
  state 11: #13
	<app> state 12
  state 12: #13
	% state 13
  state 13: #13
	<var> state 14
  state 14: #13
	<var> state 15
  state 15: #13
  state 16: #4 #6 #7 #13
	<var>::int state 17
	<var>::bigint state 18
	<var>::double state 19
	<app> state 20
  state 17: #6
  state 18: #4
  state 19: #7
  state 20: #13
	<app> state 21
  state 21: #13
	% state 22
  state 22: #13
	<var> state 23
  state 23: #13
	<var> state 24
  state 24: #13
  state 25: #1 #3 #8 #13
	<var>::int state 26
	<var>::bigint state 27
	<var>::double state 28
	<app> state 29
  state 26: #3
  state 27: #8
  state 28: #1
  state 29: #13
	<app> state 30
  state 30: #13
	% state 31
  state 31: #13
	<var> state 32
  state 32: #13
	<var> state 33
  state 33: #13
  state 34: #10 #13
	<var>::string state 35
	<app> state 36
  state 35: #10
  state 36: #13
	<app> state 37
  state 37: #13
	% state 38
  state 38: #13
	<var> state 39
  state 39: #13
	<var> state 40
  state 40: #13
  state 41: #9 #13
	<var> state 42
	<app> state 43
  state 42: #9
  state 43: #13
	<app> state 44
  state 44: #13
	% state 45
  state 45: #13
	<var> state 46
  state 46: #13
	<var> state 47
  state 47: #13
  state 48: #11 #12 #13
	<var> state 49
	<app> state 56
  state 49: #13
	<var> state 50
  state 50: #13
	<app> state 51
  state 51: #13
	<app> state 52
  state 52: #13
	% state 53
  state 53: #13
	<var> state 54
  state 54: #13
	<var> state 55
  state 55: #13
  state 56: #11 #12 #13
	<var> state 57
	% state 65
  state 57: #13
	<var> state 58
  state 58: #13
	<var> state 59
  state 59: #13
	<app> state 60
  state 60: #13
	<app> state 61
  state 61: #13
	% state 62
  state 62: #13
	<var> state 63
  state 63: #13
	<var> state 64
  state 64: #13
  state 65: #11 #12 #13
	<var> state 66
  state 66: #11 #12 #13
	<var> state 67
  state 67: #11 #12 #13
	<var> state 68
	<app> state 69
  state 68: #12
  state 69: #11 #12 #13
	<var> state 70
	<app> state 72
  state 70: #12
	<var> state 71
  state 71: #12
  state 72: #11 #12 #13
	<var> state 73
	% state 76
  state 73: #12
	<var> state 74
  state 74: #12
	<var> state 75
  state 75: #12
  state 76: #11 #12 #13
	<var> state 77
  state 77: #11 #12 #13
	<var> state 78
  state 78: #11 #12 #13
}
{
  rule #0: x::int>=y::int = x>=y
  rule #1: x::double>=y::double = x>=y
  rule #2: x::int>=y::double = x>=y
  rule #3: x::double>=y::int = x>=y
  rule #4: x::bigint>=y::bigint = bigint_cmp x y>=0
  rule #5: x::int>=y::bigint = bigint x>=y
  rule #6: x::bigint>=y::int = x>=bigint y
  rule #7: x::bigint>=y::double = double x>=y
  rule #8: x::double>=y::bigint = x>=double y
  rule #9: x>=y = bigint x>=bigint y
  rule #10: x::string>=y::string = strcmp x y>=0
  rule #11: x1%y1>=x2%y2 = x1*y2>=x2*y1
  rule #12: x1%y1>=x2 = x1>=x2*y1
  rule #13: x1>=x2%y2 = x1*y2>=x2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13
	<var> state 1
	<var>::int state 7
	<var>::bigint state 16
	<var>::double state 25
	<var>::string state 34
	<var> state 41
	<app> state 48
  state 1: #13
	<app> state 2
  state 2: #13
	<app> state 3
  state 3: #13
	% state 4
  state 4: #13
	<var> state 5
  state 5: #13
	<var> state 6
  state 6: #13
  state 7: #0 #2 #5 #13
	<var>::int state 8
	<var>::bigint state 9
	<var>::double state 10
	<app> state 11
  state 8: #0
  state 9: #5
  state 10: #2
  state 11: #13
	<app> state 12
  state 12: #13
	% state 13
  state 13: #13
	<var> state 14
  state 14: #13
	<var> state 15
  state 15: #13
  state 16: #4 #6 #7 #13
	<var>::int state 17
	<var>::bigint state 18
	<var>::double state 19
	<app> state 20
  state 17: #6
  state 18: #4
  state 19: #7
  state 20: #13
	<app> state 21
  state 21: #13
	% state 22
  state 22: #13
	<var> state 23
  state 23: #13
	<var> state 24
  state 24: #13
  state 25: #1 #3 #8 #13
	<var>::int state 26
	<var>::bigint state 27
	<var>::double state 28
	<app> state 29
  state 26: #3
  state 27: #8
  state 28: #1
  state 29: #13
	<app> state 30
  state 30: #13
	% state 31
  state 31: #13
	<var> state 32
  state 32: #13
	<var> state 33
  state 33: #13
  state 34: #10 #13
	<var>::string state 35
	<app> state 36
  state 35: #10
  state 36: #13
	<app> state 37
  state 37: #13
	% state 38
  state 38: #13
	<var> state 39
  state 39: #13
	<var> state 40
  state 40: #13
  state 41: #9 #13
	<var> state 42
	<app> state 43
  state 42: #9
  state 43: #13
	<app> state 44
  state 44: #13
	% state 45
  state 45: #13
	<var> state 46
  state 46: #13
	<var> state 47
  state 47: #13
  state 48: #11 #12 #13
	<var> state 49
	<app> state 56
  state 49: #13
	<var> state 50
  state 50: #13
	<app> state 51
  state 51: #13
	<app> state 52
  state 52: #13
	% state 53
  state 53: #13
	<var> state 54
  state 54: #13
	<var> state 55
  state 55: #13
  state 56: #11 #12 #13
	<var> state 57
	% state 65
  state 57: #13
	<var> state 58
  state 58: #13
	<var> state 59
  state 59: #13
	<app> state 60
  state 60: #13
	<app> state 61
  state 61: #13
	% state 62
  state 62: #13
	<var> state 63
  state 63: #13
	<var> state 64
  state 64: #13
  state 65: #11 #12 #13
	<var> state 66
  state 66: #11 #12 #13
	<var> state 67
  state 67: #11 #12 #13
	<var> state 68
	<app> state 69
  state 68: #12
  state 69: #11 #12 #13
	<var> state 70
	<app> state 72
  state 70: #12
	<var> state 71
  state 71: #12
  state 72: #11 #12 #13
	<var> state 73
	% state 76
  state 73: #12
	<var> state 74
  state 74: #12
	<var> state 75
  state 75: #12
  state 76: #11 #12 #13
	<var> state 77
  state 77: #11 #12 #13
	<var> state 78
  state 78: #11 #12 #13
}
{
  rule #0: x::int==y::int = x==y
  rule #1: x::double==y::double = x==y
  rule #2: x::int==y::double = x==y
  rule #3: x::double==y::int = x==y
  rule #4: x::bigint==y::bigint = bigint_cmp x y==0
  rule #5: x::int==y::bigint = bigint x==y
  rule #6: x::bigint==y::int = x==bigint y
  rule #7: x::bigint==y::double = double x==y
  rule #8: x::double==y::bigint = x==double y
  rule #9: x==y = bigint x==bigint y
  rule #10: x::string==y::string = strcmp x y==0
  rule #11: ()==() = 1
  rule #12: (x,xs)==() = 0
  rule #13: ()==(x,xs) = 0
  rule #14: (x,xs)==(y,ys) = if x==y then xs==ys else 0
  rule #15: []==[] = 1
  rule #16: x:xs==[] = 0
  rule #17: []==x:xs = 0
  rule #18: x:xs==y:ys = if x==y then xs==ys else 0
  rule #19: x1+:y1==x2+:y2 = x1==x2&&y1==y2
  rule #20: r1<:t1==r2<:t2 = r1==r2&&t1==t2
  rule #21: z1@(_+:_)==z2@(_<:_) = z1==rect z2
  rule #22: z1@(_<:_)==z2@(_+:_) = rect z1==z2
  rule #23: x1+:y1==x2 = x1==x2&&y1==0
  rule #24: x1==x2+:y2 = x1==x2&&y2==0
  rule #25: z1@(r1<:t1)==x2 = z1==x2<:0
  rule #26: x1==z2@(r2<:t2) = x1<:0==z2
  rule #27: x1%y1==x2%y2 = x1*y2==x2*y1
  rule #28: x1%y1==x2 = x1==x2*y1
  rule #29: x1==x2%y2 = x1*y2==x2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22 #23 #24 #25 #26 #27 #28 #29
	<var> state 1
	<var>::int state 13
	<var>::bigint state 28
	<var>::double state 43
	<var>::string state 58
	<var> state 71
	[] state 84
	() state 100
	<app> state 116
  state 1: #24 #26 #29
	<app> state 2
  state 2: #24 #26 #29
	<app> state 3
  state 3: #24 #26 #29
	+: state 4
	<: state 7
	% state 10
  state 4: #24
	<var> state 5
  state 5: #24
	<var> state 6
  state 6: #24
  state 7: #26
	<var> state 8
  state 8: #26
	<var> state 9
  state 9: #26
  state 10: #29
	<var> state 11
  state 11: #29
	<var> state 12
  state 12: #29
  state 13: #0 #2 #5 #24 #26 #29
	<var>::int state 14
	<var>::bigint state 15
	<var>::double state 16
	<app> state 17
  state 14: #0
  state 15: #5
  state 16: #2
  state 17: #24 #26 #29
	<app> state 18
  state 18: #24 #26 #29
	+: state 19
	<: state 22
	% state 25
  state 19: #24
	<var> state 20
  state 20: #24
	<var> state 21
  state 21: #24
  state 22: #26
	<var> state 23
  state 23: #26
	<var> state 24
  state 24: #26
  state 25: #29
	<var> state 26
  state 26: #29
	<var> state 27
  state 27: #29
  state 28: #4 #6 #7 #24 #26 #29
	<var>::int state 29
	<var>::bigint state 30
	<var>::double state 31
	<app> state 32
  state 29: #6
  state 30: #4
  state 31: #7
  state 32: #24 #26 #29
	<app> state 33
  state 33: #24 #26 #29
	+: state 34
	<: state 37
	% state 40
  state 34: #24
	<var> state 35
  state 35: #24
	<var> state 36
  state 36: #24
  state 37: #26
	<var> state 38
  state 38: #26
	<var> state 39
  state 39: #26
  state 40: #29
	<var> state 41
  state 41: #29
	<var> state 42
  state 42: #29
  state 43: #1 #3 #8 #24 #26 #29
	<var>::int state 44
	<var>::bigint state 45
	<var>::double state 46
	<app> state 47
  state 44: #3
  state 45: #8
  state 46: #1
  state 47: #24 #26 #29
	<app> state 48
  state 48: #24 #26 #29
	+: state 49
	<: state 52
	% state 55
  state 49: #24
	<var> state 50
  state 50: #24
	<var> state 51
  state 51: #24
  state 52: #26
	<var> state 53
  state 53: #26
	<var> state 54
  state 54: #26
  state 55: #29
	<var> state 56
  state 56: #29
	<var> state 57
  state 57: #29
  state 58: #10 #24 #26 #29
	<var>::string state 59
	<app> state 60
  state 59: #10
  state 60: #24 #26 #29
	<app> state 61
  state 61: #24 #26 #29
	+: state 62
	<: state 65
	% state 68
  state 62: #24
	<var> state 63
  state 63: #24
	<var> state 64
  state 64: #24
  state 65: #26
	<var> state 66
  state 66: #26
	<var> state 67
  state 67: #26
  state 68: #29
	<var> state 69
  state 69: #29
	<var> state 70
  state 70: #29
  state 71: #9 #24 #26 #29
	<var> state 72
	<app> state 73
  state 72: #9
  state 73: #24 #26 #29
	<app> state 74
  state 74: #24 #26 #29
	+: state 75
	<: state 78
	% state 81
  state 75: #24
	<var> state 76
  state 76: #24
	<var> state 77
  state 77: #24
  state 78: #26
	<var> state 79
  state 79: #26
	<var> state 80
  state 80: #26
  state 81: #29
	<var> state 82
  state 82: #29
	<var> state 83
  state 83: #29
  state 84: #15 #17 #24 #26 #29
	[] state 85
	<app> state 86
  state 85: #15
  state 86: #17 #24 #26 #29
	<app> state 87
  state 87: #17 #24 #26 #29
	: state 88
	+: state 91
	<: state 94
	% state 97
  state 88: #17
	<var> state 89
  state 89: #17
	<var> state 90
  state 90: #17
  state 91: #24
	<var> state 92
  state 92: #24
	<var> state 93
  state 93: #24
  state 94: #26
	<var> state 95
  state 95: #26
	<var> state 96
  state 96: #26
  state 97: #29
	<var> state 98
  state 98: #29
	<var> state 99
  state 99: #29
  state 100: #11 #13 #24 #26 #29
	() state 101
	<app> state 102
  state 101: #11
  state 102: #13 #24 #26 #29
	<app> state 103
  state 103: #13 #24 #26 #29
	, state 104
	+: state 107
	<: state 110
	% state 113
  state 104: #13
	<var> state 105
  state 105: #13
	<var> state 106
  state 106: #13
  state 107: #24
	<var> state 108
  state 108: #24
	<var> state 109
  state 109: #24
  state 110: #26
	<var> state 111
  state 111: #26
	<var> state 112
  state 112: #26
  state 113: #29
	<var> state 114
  state 114: #29
	<var> state 115
  state 115: #29
  state 116: #12 #14 #16 #18 #19 #20 #21 #22 #23 #24 #25 #26 #27 #28 #29
	<var> state 117
	<app> state 130
  state 117: #24 #26 #29
	<var> state 118
  state 118: #24 #26 #29
	<app> state 119
  state 119: #24 #26 #29
	<app> state 120
  state 120: #24 #26 #29
	+: state 121
	<: state 124
	% state 127
  state 121: #24
	<var> state 122
  state 122: #24
	<var> state 123
  state 123: #24
  state 124: #26
	<var> state 125
  state 125: #26
	<var> state 126
  state 126: #26
  state 127: #29
	<var> state 128
  state 128: #29
	<var> state 129
  state 129: #29
  state 130: #12 #14 #16 #18 #19 #20 #21 #22 #23 #24 #25 #26 #27 #28 #29
	<var> state 131
	, state 145
	: state 163
	+: state 181
	<: state 201
	% state 221
  state 131: #24 #26 #29
	<var> state 132
  state 132: #24 #26 #29
	<var> state 133
  state 133: #24 #26 #29
	<app> state 134
  state 134: #24 #26 #29
	<app> state 135
  state 135: #24 #26 #29
	+: state 136
	<: state 139
	% state 142
  state 136: #24
	<var> state 137
  state 137: #24
	<var> state 138
  state 138: #24
  state 139: #26
	<var> state 140
  state 140: #26
	<var> state 141
  state 141: #26
  state 142: #29
	<var> state 143
  state 143: #29
	<var> state 144
  state 144: #29
  state 145: #12 #14 #24 #26 #29
	<var> state 146
  state 146: #12 #14 #24 #26 #29
	<var> state 147
  state 147: #12 #14 #24 #26 #29
	() state 148
	<app> state 149
  state 148: #12
  state 149: #14 #24 #26 #29
	<app> state 150
  state 150: #14 #24 #26 #29
	, state 151
	+: state 154
	<: state 157
	% state 160
  state 151: #14
	<var> state 152
  state 152: #14
	<var> state 153
  state 153: #14
  state 154: #24
	<var> state 155
  state 155: #24
	<var> state 156
  state 156: #24
  state 157: #26
	<var> state 158
  state 158: #26
	<var> state 159
  state 159: #26
  state 160: #29
	<var> state 161
  state 161: #29
	<var> state 162
  state 162: #29
  state 163: #16 #18 #24 #26 #29
	<var> state 164
  state 164: #16 #18 #24 #26 #29
	<var> state 165
  state 165: #16 #18 #24 #26 #29
	[] state 166
	<app> state 167
  state 166: #16
  state 167: #18 #24 #26 #29
	<app> state 168
  state 168: #18 #24 #26 #29
	: state 169
	+: state 172
	<: state 175
	% state 178
  state 169: #18
	<var> state 170
  state 170: #18
	<var> state 171
  state 171: #18
  state 172: #24
	<var> state 173
  state 173: #24
	<var> state 174
  state 174: #24
  state 175: #26
	<var> state 176
  state 176: #26
	<var> state 177
  state 177: #26
  state 178: #29
	<var> state 179
  state 179: #29
	<var> state 180
  state 180: #29
  state 181: #19 #21 #23 #24 #26 #29
	<var> state 182
  state 182: #19 #21 #23 #24 #26 #29
	<var> state 183
  state 183: #19 #21 #23 #24 #26 #29
	<var> state 184
	<app> state 185
  state 184: #23
  state 185: #19 #21 #23 #24 #26 #29
	<var> state 186
	<app> state 188
  state 186: #23
	<var> state 187
  state 187: #23
  state 188: #19 #21 #23 #24 #26 #29
	<var> state 189
	+: state 192
	<: state 195
	% state 198
  state 189: #23
	<var> state 190
  state 190: #23
	<var> state 191
  state 191: #23
  state 192: #19 #23 #24
	<var> state 193
  state 193: #19 #23 #24
	<var> state 194
  state 194: #19 #23 #24
  state 195: #21 #23 #26
	<var> state 196
  state 196: #21 #23 #26
	<var> state 197
  state 197: #21 #23 #26
  state 198: #23 #29
	<var> state 199
  state 199: #23 #29
	<var> state 200
  state 200: #23 #29
  state 201: #20 #22 #24 #25 #26 #29
	<var> state 202
  state 202: #20 #22 #24 #25 #26 #29
	<var> state 203
  state 203: #20 #22 #24 #25 #26 #29
	<var> state 204
	<app> state 205
  state 204: #25
  state 205: #20 #22 #24 #25 #26 #29
	<var> state 206
	<app> state 208
  state 206: #25
	<var> state 207
  state 207: #25
  state 208: #20 #22 #24 #25 #26 #29
	<var> state 209
	+: state 212
	<: state 215
	% state 218
  state 209: #25
	<var> state 210
  state 210: #25
	<var> state 211
  state 211: #25
  state 212: #22 #24 #25
	<var> state 213
  state 213: #22 #24 #25
	<var> state 214
  state 214: #22 #24 #25
  state 215: #20 #25 #26
	<var> state 216
  state 216: #20 #25 #26
	<var> state 217
  state 217: #20 #25 #26
  state 218: #25 #29
	<var> state 219
  state 219: #25 #29
	<var> state 220
  state 220: #25 #29
  state 221: #24 #26 #27 #28 #29
	<var> state 222
  state 222: #24 #26 #27 #28 #29
	<var> state 223
  state 223: #24 #26 #27 #28 #29
	<var> state 224
	<app> state 225
  state 224: #28
  state 225: #24 #26 #27 #28 #29
	<var> state 226
	<app> state 228
  state 226: #28
	<var> state 227
  state 227: #28
  state 228: #24 #26 #27 #28 #29
	<var> state 229
	+: state 232
	<: state 235
	% state 238
  state 229: #28
	<var> state 230
  state 230: #28
	<var> state 231
  state 231: #28
  state 232: #24 #28
	<var> state 233
  state 233: #24 #28
	<var> state 234
  state 234: #24 #28
  state 235: #26 #28
	<var> state 236
  state 236: #26 #28
	<var> state 237
  state 237: #26 #28
  state 238: #27 #28 #29
	<var> state 239
  state 239: #27 #28 #29
	<var> state 240
  state 240: #27 #28 #29
}
{
  rule #0: x::int!=y::int = x!=y
  rule #1: x::double!=y::double = x!=y
  rule #2: x::int!=y::double = x!=y
  rule #3: x::double!=y::int = x!=y
  rule #4: x::bigint!=y::bigint = bigint_cmp x y!=0
  rule #5: x::int!=y::bigint = bigint x!=y
  rule #6: x::bigint!=y::int = x!=bigint y
  rule #7: x::bigint!=y::double = double x!=y
  rule #8: x::double!=y::bigint = x!=double y
  rule #9: x!=y = bigint x!=bigint y
  rule #10: x::string!=y::string = strcmp x y!=0
  rule #11: ()!=() = 0
  rule #12: (x,xs)!=() = 1
  rule #13: ()!=(x,xs) = 1
  rule #14: (x,xs)!=(y,ys) = if x!=y then 1 else xs!=ys
  rule #15: []!=[] = 0
  rule #16: x:xs!=[] = 1
  rule #17: []!=x:xs = 1
  rule #18: x:xs!=y:ys = if x!=y then 1 else xs!=ys
  rule #19: x1+:y1!=x2+:y2 = x1!=x2||y1!=y2
  rule #20: r1<:t1!=r2<:t2 = r1!=r2||t1!=t2
  rule #21: z1@(_+:_)!=z2@(_<:_) = z1!=rect z2
  rule #22: z1@(_<:_)!=z2@(_+:_) = rect z1!=z2
  rule #23: x1+:y1!=x2 = x1!=x2||y1!=0
  rule #24: x1!=x2+:y2 = x1!=x2||y2!=0
  rule #25: z1@(r1<:t1)!=x2 = z1!=x2<:0
  rule #26: x1!=z2@(r2<:t2) = x1<:0!=z2
  rule #27: x1%y1!=x2%y2 = x1*y2!=x2*y1
  rule #28: x1%y1!=x2 = x1!=x2*y1
  rule #29: x1!=x2%y2 = x1*y2!=x2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22 #23 #24 #25 #26 #27 #28 #29
	<var> state 1
	<var>::int state 13
	<var>::bigint state 28
	<var>::double state 43
	<var>::string state 58
	<var> state 71
	[] state 84
	() state 100
	<app> state 116
  state 1: #24 #26 #29
	<app> state 2
  state 2: #24 #26 #29
	<app> state 3
  state 3: #24 #26 #29
	+: state 4
	<: state 7
	% state 10
  state 4: #24
	<var> state 5
  state 5: #24
	<var> state 6
  state 6: #24
  state 7: #26
	<var> state 8
  state 8: #26
	<var> state 9
  state 9: #26
  state 10: #29
	<var> state 11
  state 11: #29
	<var> state 12
  state 12: #29
  state 13: #0 #2 #5 #24 #26 #29
	<var>::int state 14
	<var>::bigint state 15
	<var>::double state 16
	<app> state 17
  state 14: #0
  state 15: #5
  state 16: #2
  state 17: #24 #26 #29
	<app> state 18
  state 18: #24 #26 #29
	+: state 19
	<: state 22
	% state 25
  state 19: #24
	<var> state 20
  state 20: #24
	<var> state 21
  state 21: #24
  state 22: #26
	<var> state 23
  state 23: #26
	<var> state 24
  state 24: #26
  state 25: #29
	<var> state 26
  state 26: #29
	<var> state 27
  state 27: #29
  state 28: #4 #6 #7 #24 #26 #29
	<var>::int state 29
	<var>::bigint state 30
	<var>::double state 31
	<app> state 32
  state 29: #6
  state 30: #4
  state 31: #7
  state 32: #24 #26 #29
	<app> state 33
  state 33: #24 #26 #29
	+: state 34
	<: state 37
	% state 40
  state 34: #24
	<var> state 35
  state 35: #24
	<var> state 36
  state 36: #24
  state 37: #26
	<var> state 38
  state 38: #26
	<var> state 39
  state 39: #26
  state 40: #29
	<var> state 41
  state 41: #29
	<var> state 42
  state 42: #29
  state 43: #1 #3 #8 #24 #26 #29
	<var>::int state 44
	<var>::bigint state 45
	<var>::double state 46
	<app> state 47
  state 44: #3
  state 45: #8
  state 46: #1
  state 47: #24 #26 #29
	<app> state 48
  state 48: #24 #26 #29
	+: state 49
	<: state 52
	% state 55
  state 49: #24
	<var> state 50
  state 50: #24
	<var> state 51
  state 51: #24
  state 52: #26
	<var> state 53
  state 53: #26
	<var> state 54
  state 54: #26
  state 55: #29
	<var> state 56
  state 56: #29
	<var> state 57
  state 57: #29
  state 58: #10 #24 #26 #29
	<var>::string state 59
	<app> state 60
  state 59: #10
  state 60: #24 #26 #29
	<app> state 61
  state 61: #24 #26 #29
	+: state 62
	<: state 65
	% state 68
  state 62: #24
	<var> state 63
  state 63: #24
	<var> state 64
  state 64: #24
  state 65: #26
	<var> state 66
  state 66: #26
	<var> state 67
  state 67: #26
  state 68: #29
	<var> state 69
  state 69: #29
	<var> state 70
  state 70: #29
  state 71: #9 #24 #26 #29
	<var> state 72
	<app> state 73
  state 72: #9
  state 73: #24 #26 #29
	<app> state 74
  state 74: #24 #26 #29
	+: state 75
	<: state 78
	% state 81
  state 75: #24
	<var> state 76
  state 76: #24
	<var> state 77
  state 77: #24
  state 78: #26
	<var> state 79
  state 79: #26
	<var> state 80
  state 80: #26
  state 81: #29
	<var> state 82
  state 82: #29
	<var> state 83
  state 83: #29
  state 84: #15 #17 #24 #26 #29
	[] state 85
	<app> state 86
  state 85: #15
  state 86: #17 #24 #26 #29
	<app> state 87
  state 87: #17 #24 #26 #29
	: state 88
	+: state 91
	<: state 94
	% state 97
  state 88: #17
	<var> state 89
  state 89: #17
	<var> state 90
  state 90: #17
  state 91: #24
	<var> state 92
  state 92: #24
	<var> state 93
  state 93: #24
  state 94: #26
	<var> state 95
  state 95: #26
	<var> state 96
  state 96: #26
  state 97: #29
	<var> state 98
  state 98: #29
	<var> state 99
  state 99: #29
  state 100: #11 #13 #24 #26 #29
	() state 101
	<app> state 102
  state 101: #11
  state 102: #13 #24 #26 #29
	<app> state 103
  state 103: #13 #24 #26 #29
	, state 104
	+: state 107
	<: state 110
	% state 113
  state 104: #13
	<var> state 105
  state 105: #13
	<var> state 106
  state 106: #13
  state 107: #24
	<var> state 108
  state 108: #24
	<var> state 109
  state 109: #24
  state 110: #26
	<var> state 111
  state 111: #26
	<var> state 112
  state 112: #26
  state 113: #29
	<var> state 114
  state 114: #29
	<var> state 115
  state 115: #29
  state 116: #12 #14 #16 #18 #19 #20 #21 #22 #23 #24 #25 #26 #27 #28 #29
	<var> state 117
	<app> state 130
  state 117: #24 #26 #29
	<var> state 118
  state 118: #24 #26 #29
	<app> state 119
  state 119: #24 #26 #29
	<app> state 120
  state 120: #24 #26 #29
	+: state 121
	<: state 124
	% state 127
  state 121: #24
	<var> state 122
  state 122: #24
	<var> state 123
  state 123: #24
  state 124: #26
	<var> state 125
  state 125: #26
	<var> state 126
  state 126: #26
  state 127: #29
	<var> state 128
  state 128: #29
	<var> state 129
  state 129: #29
  state 130: #12 #14 #16 #18 #19 #20 #21 #22 #23 #24 #25 #26 #27 #28 #29
	<var> state 131
	, state 145
	: state 163
	+: state 181
	<: state 201
	% state 221
  state 131: #24 #26 #29
	<var> state 132
  state 132: #24 #26 #29
	<var> state 133
  state 133: #24 #26 #29
	<app> state 134
  state 134: #24 #26 #29
	<app> state 135
  state 135: #24 #26 #29
	+: state 136
	<: state 139
	% state 142
  state 136: #24
	<var> state 137
  state 137: #24
	<var> state 138
  state 138: #24
  state 139: #26
	<var> state 140
  state 140: #26
	<var> state 141
  state 141: #26
  state 142: #29
	<var> state 143
  state 143: #29
	<var> state 144
  state 144: #29
  state 145: #12 #14 #24 #26 #29
	<var> state 146
  state 146: #12 #14 #24 #26 #29
	<var> state 147
  state 147: #12 #14 #24 #26 #29
	() state 148
	<app> state 149
  state 148: #12
  state 149: #14 #24 #26 #29
	<app> state 150
  state 150: #14 #24 #26 #29
	, state 151
	+: state 154
	<: state 157
	% state 160
  state 151: #14
	<var> state 152
  state 152: #14
	<var> state 153
  state 153: #14
  state 154: #24
	<var> state 155
  state 155: #24
	<var> state 156
  state 156: #24
  state 157: #26
	<var> state 158
  state 158: #26
	<var> state 159
  state 159: #26
  state 160: #29
	<var> state 161
  state 161: #29
	<var> state 162
  state 162: #29
  state 163: #16 #18 #24 #26 #29
	<var> state 164
  state 164: #16 #18 #24 #26 #29
	<var> state 165
  state 165: #16 #18 #24 #26 #29
	[] state 166
	<app> state 167
  state 166: #16
  state 167: #18 #24 #26 #29
	<app> state 168
  state 168: #18 #24 #26 #29
	: state 169
	+: state 172
	<: state 175
	% state 178
  state 169: #18
	<var> state 170
  state 170: #18
	<var> state 171
  state 171: #18
  state 172: #24
	<var> state 173
  state 173: #24
	<var> state 174
  state 174: #24
  state 175: #26
	<var> state 176
  state 176: #26
	<var> state 177
  state 177: #26
  state 178: #29
	<var> state 179
  state 179: #29
	<var> state 180
  state 180: #29
  state 181: #19 #21 #23 #24 #26 #29
	<var> state 182
  state 182: #19 #21 #23 #24 #26 #29
	<var> state 183
  state 183: #19 #21 #23 #24 #26 #29
	<var> state 184
	<app> state 185
  state 184: #23
  state 185: #19 #21 #23 #24 #26 #29
	<var> state 186
	<app> state 188
  state 186: #23
	<var> state 187
  state 187: #23
  state 188: #19 #21 #23 #24 #26 #29
	<var> state 189
	+: state 192
	<: state 195
	% state 198
  state 189: #23
	<var> state 190
  state 190: #23
	<var> state 191
  state 191: #23
  state 192: #19 #23 #24
	<var> state 193
  state 193: #19 #23 #24
	<var> state 194
  state 194: #19 #23 #24
  state 195: #21 #23 #26
	<var> state 196
  state 196: #21 #23 #26
	<var> state 197
  state 197: #21 #23 #26
  state 198: #23 #29
	<var> state 199
  state 199: #23 #29
	<var> state 200
  state 200: #23 #29
  state 201: #20 #22 #24 #25 #26 #29
	<var> state 202
  state 202: #20 #22 #24 #25 #26 #29
	<var> state 203
  state 203: #20 #22 #24 #25 #26 #29
	<var> state 204
	<app> state 205
  state 204: #25
  state 205: #20 #22 #24 #25 #26 #29
	<var> state 206
	<app> state 208
  state 206: #25
	<var> state 207
  state 207: #25
  state 208: #20 #22 #24 #25 #26 #29
	<var> state 209
	+: state 212
	<: state 215
	% state 218
  state 209: #25
	<var> state 210
  state 210: #25
	<var> state 211
  state 211: #25
  state 212: #22 #24 #25
	<var> state 213
  state 213: #22 #24 #25
	<var> state 214
  state 214: #22 #24 #25
  state 215: #20 #25 #26
	<var> state 216
  state 216: #20 #25 #26
	<var> state 217
  state 217: #20 #25 #26
  state 218: #25 #29
	<var> state 219
  state 219: #25 #29
	<var> state 220
  state 220: #25 #29
  state 221: #24 #26 #27 #28 #29
	<var> state 222
  state 222: #24 #26 #27 #28 #29
	<var> state 223
  state 223: #24 #26 #27 #28 #29
	<var> state 224
	<app> state 225
  state 224: #28
  state 225: #24 #26 #27 #28 #29
	<var> state 226
	<app> state 228
  state 226: #28
	<var> state 227
  state 227: #28
  state 228: #24 #26 #27 #28 #29
	<var> state 229
	+: state 232
	<: state 235
	% state 238
  state 229: #28
	<var> state 230
  state 230: #28
	<var> state 231
  state 231: #28
  state 232: #24 #28
	<var> state 233
  state 233: #24 #28
	<var> state 234
  state 234: #24 #28
  state 235: #26 #28
	<var> state 236
  state 236: #26 #28
	<var> state 237
  state 237: #26 #28
  state 238: #27 #28 #29
	<var> state 239
  state 239: #27 #28 #29
	<var> state 240
  state 240: #27 #28 #29
}
{
  rule #0: x::int+y::int = x+y
  rule #1: x::double+y::double = x+y
  rule #2: x::int+y::double = x+y
  rule #3: x::double+y::int = x+y
  rule #4: x::bigint+y::bigint = bigint_add x y
  rule #5: x::int+y::bigint = bigint x+y
  rule #6: x::bigint+y::int = x+bigint y
  rule #7: x::bigint+y::double = double x+y
  rule #8: x::double+y::bigint = x+double y
  rule #9: x+y::int = pointer (bigint x+y)
  rule #10: x+y::bigint = pointer (bigint x+y)
  rule #11: c::string+n::int = chr (ord c+n) if #c==1
  rule #12: s::string+t::string = string_concat s t
  rule #13: []+ys = ys
  rule #14: (x:xs)+ys = x:accum ys (reverse xs) with accum ys (x:xs) = accum (x:ys) xs; accum ys [] = ys end
  rule #15: (x1+:y1)+(x2+:y2) = x1+x2+:y1+y2
  rule #16: z1@(r1<:t1)+z2@(r2<:t2) = polar$rect z1+rect z2
  rule #17: z1@(x1+:y1)+z2@(r2<:t2) = z1+rect z2
  rule #18: z1@(r1<:t1)+z2@(x2+:y2) = rect z1+z2
  rule #19: (x1+:y1)+x2 = x1+x2+:y1
  rule #20: x1+(x2+:y2) = x1+x2+:y2
  rule #21: z1@(r1<:t1)+x2 = rect z1+x2
  rule #22: x1+z2@(r2<:t2) = x1+rect z2
  rule #23: x1%y1+x2%y2 = (x1*y2+x2*y1)%(y1*y2)
  rule #24: x1%y1+x2 = (x1+x2*y1)%y1
  rule #25: x1+x2%y2 = (x1*y2+x2)%y2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22 #23 #24 #25
	<var> state 1
	<var>::int state 13
	<var>::bigint state 28
	<var>::double state 43
	<var>::string state 58
	<var> state 72
	[] state 86
	<app> state 104
  state 1: #20 #22 #25
	<app> state 2
  state 2: #20 #22 #25
	<app> state 3
  state 3: #20 #22 #25
	+: state 4
	<: state 7
	% state 10
  state 4: #20
	<var> state 5
  state 5: #20
	<var> state 6
  state 6: #20
  state 7: #22
	<var> state 8
  state 8: #22
	<var> state 9
  state 9: #22
  state 10: #25
	<var> state 11
  state 11: #25
	<var> state 12
  state 12: #25
  state 13: #0 #2 #5 #20 #22 #25
	<var>::int state 14
	<var>::bigint state 15
	<var>::double state 16
	<app> state 17
  state 14: #0
  state 15: #5
  state 16: #2
  state 17: #20 #22 #25
	<app> state 18
  state 18: #20 #22 #25
	+: state 19
	<: state 22
	% state 25
  state 19: #20
	<var> state 20
  state 20: #20
	<var> state 21
  state 21: #20
  state 22: #22
	<var> state 23
  state 23: #22
	<var> state 24
  state 24: #22
  state 25: #25
	<var> state 26
  state 26: #25
	<var> state 27
  state 27: #25
  state 28: #4 #6 #7 #20 #22 #25
	<var>::int state 29
	<var>::bigint state 30
	<var>::double state 31
	<app> state 32
  state 29: #6
  state 30: #4
  state 31: #7
  state 32: #20 #22 #25
	<app> state 33
  state 33: #20 #22 #25
	+: state 34
	<: state 37
	% state 40
  state 34: #20
	<var> state 35
  state 35: #20
	<var> state 36
  state 36: #20
  state 37: #22
	<var> state 38
  state 38: #22
	<var> state 39
  state 39: #22
  state 40: #25
	<var> state 41
  state 41: #25
	<var> state 42
  state 42: #25
  state 43: #1 #3 #8 #20 #22 #25
	<var>::int state 44
	<var>::bigint state 45
	<var>::double state 46
	<app> state 47
  state 44: #3
  state 45: #8
  state 46: #1
  state 47: #20 #22 #25
	<app> state 48
  state 48: #20 #22 #25
	+: state 49
	<: state 52
	% state 55
  state 49: #20
	<var> state 50
  state 50: #20
	<var> state 51
  state 51: #20
  state 52: #22
	<var> state 53
  state 53: #22
	<var> state 54
  state 54: #22
  state 55: #25
	<var> state 56
  state 56: #25
	<var> state 57
  state 57: #25
  state 58: #11 #12 #20 #22 #25
	<var>::int state 59
	<var>::string state 60
	<app> state 61
  state 59: #11
  state 60: #12
  state 61: #20 #22 #25
	<app> state 62
  state 62: #20 #22 #25
	+: state 63
	<: state 66
	% state 69
  state 63: #20
	<var> state 64
  state 64: #20
	<var> state 65
  state 65: #20
  state 66: #22
	<var> state 67
  state 67: #22
	<var> state 68
  state 68: #22
  state 69: #25
	<var> state 70
  state 70: #25
	<var> state 71
  state 71: #25
  state 72: #9 #10 #20 #22 #25
	<var>::int state 73
	<var>::bigint state 74
	<app> state 75
  state 73: #9
  state 74: #10
  state 75: #20 #22 #25
	<app> state 76
  state 76: #20 #22 #25
	+: state 77
	<: state 80
	% state 83
  state 77: #20
	<var> state 78
  state 78: #20
	<var> state 79
  state 79: #20
  state 80: #22
	<var> state 81
  state 81: #22
	<var> state 82
  state 82: #22
  state 83: #25
	<var> state 84
  state 84: #25
	<var> state 85
  state 85: #25
  state 86: #13 #20 #22 #25
	<var> state 87
	<app> state 88
  state 87: #13
  state 88: #13 #20 #22 #25
	<var> state 89
	<app> state 91
  state 89: #13
	<var> state 90
  state 90: #13
  state 91: #13 #20 #22 #25
	<var> state 92
	+: state 95
	<: state 98
	% state 101
  state 92: #13
	<var> state 93
  state 93: #13
	<var> state 94
  state 94: #13
  state 95: #13 #20
	<var> state 96
  state 96: #13 #20
	<var> state 97
  state 97: #13 #20
  state 98: #13 #22
	<var> state 99
  state 99: #13 #22
	<var> state 100
  state 100: #13 #22
  state 101: #13 #25
	<var> state 102
  state 102: #13 #25
	<var> state 103
  state 103: #13 #25
  state 104: #14 #15 #16 #17 #18 #19 #20 #21 #22 #23 #24 #25
	<var> state 105
	<app> state 118
  state 105: #20 #22 #25
	<var> state 106
  state 106: #20 #22 #25
	<app> state 107
  state 107: #20 #22 #25
	<app> state 108
  state 108: #20 #22 #25
	+: state 109
	<: state 112
	% state 115
  state 109: #20
	<var> state 110
  state 110: #20
	<var> state 111
  state 111: #20
  state 112: #22
	<var> state 113
  state 113: #22
	<var> state 114
  state 114: #22
  state 115: #25
	<var> state 116
  state 116: #25
	<var> state 117
  state 117: #25
  state 118: #14 #15 #16 #17 #18 #19 #20 #21 #22 #23 #24 #25
	<var> state 119
	: state 133
	+: state 153
	<: state 173
	% state 193
  state 119: #20 #22 #25
	<var> state 120
  state 120: #20 #22 #25
	<var> state 121
  state 121: #20 #22 #25
	<app> state 122
  state 122: #20 #22 #25
	<app> state 123
  state 123: #20 #22 #25
	+: state 124
	<: state 127
	% state 130
  state 124: #20
	<var> state 125
  state 125: #20
	<var> state 126
  state 126: #20
  state 127: #22
	<var> state 128
  state 128: #22
	<var> state 129
  state 129: #22
  state 130: #25
	<var> state 131
  state 131: #25
	<var> state 132
  state 132: #25
  state 133: #14 #20 #22 #25
	<var> state 134
  state 134: #14 #20 #22 #25
	<var> state 135
  state 135: #14 #20 #22 #25
	<var> state 136
	<app> state 137
  state 136: #14
  state 137: #14 #20 #22 #25
	<var> state 138
	<app> state 140
  state 138: #14
	<var> state 139
  state 139: #14
  state 140: #14 #20 #22 #25
	<var> state 141
	+: state 144
	<: state 147
	% state 150
  state 141: #14
	<var> state 142
  state 142: #14
	<var> state 143
  state 143: #14
  state 144: #14 #20
	<var> state 145
  state 145: #14 #20
	<var> state 146
  state 146: #14 #20
  state 147: #14 #22
	<var> state 148
  state 148: #14 #22
	<var> state 149
  state 149: #14 #22
  state 150: #14 #25
	<var> state 151
  state 151: #14 #25
	<var> state 152
  state 152: #14 #25
  state 153: #15 #17 #19 #20 #22 #25
	<var> state 154
  state 154: #15 #17 #19 #20 #22 #25
	<var> state 155
  state 155: #15 #17 #19 #20 #22 #25
	<var> state 156
	<app> state 157
  state 156: #19
  state 157: #15 #17 #19 #20 #22 #25
	<var> state 158
	<app> state 160
  state 158: #19
	<var> state 159
  state 159: #19
  state 160: #15 #17 #19 #20 #22 #25
	<var> state 161
	+: state 164
	<: state 167
	% state 170
  state 161: #19
	<var> state 162
  state 162: #19
	<var> state 163
  state 163: #19
  state 164: #15 #19 #20
	<var> state 165
  state 165: #15 #19 #20
	<var> state 166
  state 166: #15 #19 #20
  state 167: #17 #19 #22
	<var> state 168
  state 168: #17 #19 #22
	<var> state 169
  state 169: #17 #19 #22
  state 170: #19 #25
	<var> state 171
  state 171: #19 #25
	<var> state 172
  state 172: #19 #25
  state 173: #16 #18 #20 #21 #22 #25
	<var> state 174
  state 174: #16 #18 #20 #21 #22 #25
	<var> state 175
  state 175: #16 #18 #20 #21 #22 #25
	<var> state 176
	<app> state 177
  state 176: #21
  state 177: #16 #18 #20 #21 #22 #25
	<var> state 178
	<app> state 180
  state 178: #21
	<var> state 179
  state 179: #21
  state 180: #16 #18 #20 #21 #22 #25
	<var> state 181
	+: state 184
	<: state 187
	% state 190
  state 181: #21
	<var> state 182
  state 182: #21
	<var> state 183
  state 183: #21
  state 184: #18 #20 #21
	<var> state 185
  state 185: #18 #20 #21
	<var> state 186
  state 186: #18 #20 #21
  state 187: #16 #21 #22
	<var> state 188
  state 188: #16 #21 #22
	<var> state 189
  state 189: #16 #21 #22
  state 190: #21 #25
	<var> state 191
  state 191: #21 #25
	<var> state 192
  state 192: #21 #25
  state 193: #20 #22 #23 #24 #25
	<var> state 194
  state 194: #20 #22 #23 #24 #25
	<var> state 195
  state 195: #20 #22 #23 #24 #25
	<var> state 196
	<app> state 197
  state 196: #24
  state 197: #20 #22 #23 #24 #25
	<var> state 198
	<app> state 200
  state 198: #24
	<var> state 199
  state 199: #24
  state 200: #20 #22 #23 #24 #25
	<var> state 201
	+: state 204
	<: state 207
	% state 210
  state 201: #24
	<var> state 202
  state 202: #24
	<var> state 203
  state 203: #24
  state 204: #20 #24
	<var> state 205
  state 205: #20 #24
	<var> state 206
  state 206: #20 #24
  state 207: #22 #24
	<var> state 208
  state 208: #22 #24
	<var> state 209
  state 209: #22 #24
  state 210: #23 #24 #25
	<var> state 211
  state 211: #23 #24 #25
	<var> state 212
  state 212: #23 #24 #25
}
{
  rule #0: x::int-y::int = x-y
  rule #1: x::double-y::double = x-y
  rule #2: x::int-y::double = x-y
  rule #3: x::double-y::int = x-y
  rule #4: x::bigint-y::bigint = bigint_sub x y
  rule #5: x::int-y::bigint = bigint x-y
  rule #6: x::bigint-y::int = x-bigint y
  rule #7: x::bigint-y::double = double x-y
  rule #8: x::double-y::bigint = x-double y
  rule #9: x-y = bigint x-bigint y
  rule #10: c::string-n::int = chr (ord c-n) if #c==1&&ord c>=n
  rule #11: c::string-d::string = ord c-ord d if #c==1&&#d==1
  rule #12: (x1+:y1)-(x2+:y2) = x1-x2+:y1-y2
  rule #13: z1@(r1<:t1)-z2@(r2<:t2) = polar$rect z1-rect z2
  rule #14: z1@(x1+:y1)-z2@(r2<:t2) = z1-rect z2
  rule #15: z1@(r1<:t1)-z2@(x2+:y2) = rect z1-z2
  rule #16: (x1+:y1)-x2 = x1-x2+:y1
  rule #17: x1-(x2+:y2) = x1-x2+:-y2
  rule #18: z1@(r1<:t1)-x2 = rect z1-x2
  rule #19: x1-z2@(r2<:t2) = x1-rect z2
  rule #20: x1%y1-x2%y2 = (x1*y2-x2*y1)%(y1*y2)
  rule #21: x1%y1-x2 = (x1-x2*y1)%y1
  rule #22: x1-x2%y2 = (x1*y2-x2)%y2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22
	<var> state 1
	<var>::int state 13
	<var>::bigint state 28
	<var>::double state 43
	<var>::string state 58
	<var> state 72
	<app> state 85
  state 1: #17 #19 #22
	<app> state 2
  state 2: #17 #19 #22
	<app> state 3
  state 3: #17 #19 #22
	+: state 4
	<: state 7
	% state 10
  state 4: #17
	<var> state 5
  state 5: #17
	<var> state 6
  state 6: #17
  state 7: #19
	<var> state 8
  state 8: #19
	<var> state 9
  state 9: #19
  state 10: #22
	<var> state 11
  state 11: #22
	<var> state 12
  state 12: #22
  state 13: #0 #2 #5 #17 #19 #22
	<var>::int state 14
	<var>::bigint state 15
	<var>::double state 16
	<app> state 17
  state 14: #0
  state 15: #5
  state 16: #2
  state 17: #17 #19 #22
	<app> state 18
  state 18: #17 #19 #22
	+: state 19
	<: state 22
	% state 25
  state 19: #17
	<var> state 20
  state 20: #17
	<var> state 21
  state 21: #17
  state 22: #19
	<var> state 23
  state 23: #19
	<var> state 24
  state 24: #19
  state 25: #22
	<var> state 26
  state 26: #22
	<var> state 27
  state 27: #22
  state 28: #4 #6 #7 #17 #19 #22
	<var>::int state 29
	<var>::bigint state 30
	<var>::double state 31
	<app> state 32
  state 29: #6
  state 30: #4
  state 31: #7
  state 32: #17 #19 #22
	<app> state 33
  state 33: #17 #19 #22
	+: state 34
	<: state 37
	% state 40
  state 34: #17
	<var> state 35
  state 35: #17
	<var> state 36
  state 36: #17
  state 37: #19
	<var> state 38
  state 38: #19
	<var> state 39
  state 39: #19
  state 40: #22
	<var> state 41
  state 41: #22
	<var> state 42
  state 42: #22
  state 43: #1 #3 #8 #17 #19 #22
	<var>::int state 44
	<var>::bigint state 45
	<var>::double state 46
	<app> state 47
  state 44: #3
  state 45: #8
  state 46: #1
  state 47: #17 #19 #22
	<app> state 48
  state 48: #17 #19 #22
	+: state 49
	<: state 52
	% state 55
  state 49: #17
	<var> state 50
  state 50: #17
	<var> state 51
  state 51: #17
  state 52: #19
	<var> state 53
  state 53: #19
	<var> state 54
  state 54: #19
  state 55: #22
	<var> state 56
  state 56: #22
	<var> state 57
  state 57: #22
  state 58: #10 #11 #17 #19 #22
	<var>::int state 59
	<var>::string state 60
	<app> state 61
  state 59: #10
  state 60: #11
  state 61: #17 #19 #22
	<app> state 62
  state 62: #17 #19 #22
	+: state 63
	<: state 66
	% state 69
  state 63: #17
	<var> state 64
  state 64: #17
	<var> state 65
  state 65: #17
  state 66: #19
	<var> state 67
  state 67: #19
	<var> state 68
  state 68: #19
  state 69: #22
	<var> state 70
  state 70: #22
	<var> state 71
  state 71: #22
  state 72: #9 #17 #19 #22
	<var> state 73
	<app> state 74
  state 73: #9
  state 74: #17 #19 #22
	<app> state 75
  state 75: #17 #19 #22
	+: state 76
	<: state 79
	% state 82
  state 76: #17
	<var> state 77
  state 77: #17
	<var> state 78
  state 78: #17
  state 79: #19
	<var> state 80
  state 80: #19
	<var> state 81
  state 81: #19
  state 82: #22
	<var> state 83
  state 83: #22
	<var> state 84
  state 84: #22
  state 85: #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22
	<var> state 86
	<app> state 99
  state 86: #17 #19 #22
	<var> state 87
  state 87: #17 #19 #22
	<app> state 88
  state 88: #17 #19 #22
	<app> state 89
  state 89: #17 #19 #22
	+: state 90
	<: state 93
	% state 96
  state 90: #17
	<var> state 91
  state 91: #17
	<var> state 92
  state 92: #17
  state 93: #19
	<var> state 94
  state 94: #19
	<var> state 95
  state 95: #19
  state 96: #22
	<var> state 97
  state 97: #22
	<var> state 98
  state 98: #22
  state 99: #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22
	<var> state 100
	+: state 114
	<: state 134
	% state 154
  state 100: #17 #19 #22
	<var> state 101
  state 101: #17 #19 #22
	<var> state 102
  state 102: #17 #19 #22
	<app> state 103
  state 103: #17 #19 #22
	<app> state 104
  state 104: #17 #19 #22
	+: state 105
	<: state 108
	% state 111
  state 105: #17
	<var> state 106
  state 106: #17
	<var> state 107
  state 107: #17
  state 108: #19
	<var> state 109
  state 109: #19
	<var> state 110
  state 110: #19
  state 111: #22
	<var> state 112
  state 112: #22
	<var> state 113
  state 113: #22
  state 114: #12 #14 #16 #17 #19 #22
	<var> state 115
  state 115: #12 #14 #16 #17 #19 #22
	<var> state 116
  state 116: #12 #14 #16 #17 #19 #22
	<var> state 117
	<app> state 118
  state 117: #16
  state 118: #12 #14 #16 #17 #19 #22
	<var> state 119
	<app> state 121
  state 119: #16
	<var> state 120
  state 120: #16
  state 121: #12 #14 #16 #17 #19 #22
	<var> state 122
	+: state 125
	<: state 128
	% state 131
  state 122: #16
	<var> state 123
  state 123: #16
	<var> state 124
  state 124: #16
  state 125: #12 #16 #17
	<var> state 126
  state 126: #12 #16 #17
	<var> state 127
  state 127: #12 #16 #17
  state 128: #14 #16 #19
	<var> state 129
  state 129: #14 #16 #19
	<var> state 130
  state 130: #14 #16 #19
  state 131: #16 #22
	<var> state 132
  state 132: #16 #22
	<var> state 133
  state 133: #16 #22
  state 134: #13 #15 #17 #18 #19 #22
	<var> state 135
  state 135: #13 #15 #17 #18 #19 #22
	<var> state 136
  state 136: #13 #15 #17 #18 #19 #22
	<var> state 137
	<app> state 138
  state 137: #18
  state 138: #13 #15 #17 #18 #19 #22
	<var> state 139
	<app> state 141
  state 139: #18
	<var> state 140
  state 140: #18
  state 141: #13 #15 #17 #18 #19 #22
	<var> state 142
	+: state 145
	<: state 148
	% state 151
  state 142: #18
	<var> state 143
  state 143: #18
	<var> state 144
  state 144: #18
  state 145: #15 #17 #18
	<var> state 146
  state 146: #15 #17 #18
	<var> state 147
  state 147: #15 #17 #18
  state 148: #13 #18 #19
	<var> state 149
  state 149: #13 #18 #19
	<var> state 150
  state 150: #13 #18 #19
  state 151: #18 #22
	<var> state 152
  state 152: #18 #22
	<var> state 153
  state 153: #18 #22
  state 154: #17 #19 #20 #21 #22
	<var> state 155
  state 155: #17 #19 #20 #21 #22
	<var> state 156
  state 156: #17 #19 #20 #21 #22
	<var> state 157
	<app> state 158
  state 157: #21
  state 158: #17 #19 #20 #21 #22
	<var> state 159
	<app> state 161
  state 159: #21
	<var> state 160
  state 160: #21
  state 161: #17 #19 #20 #21 #22
	<var> state 162
	+: state 165
	<: state 168
	% state 171
  state 162: #21
	<var> state 163
  state 163: #21
	<var> state 164
  state 164: #21
  state 165: #17 #21
	<var> state 166
  state 166: #17 #21
	<var> state 167
  state 167: #17 #21
  state 168: #19 #21
	<var> state 169
  state 169: #19 #21
	<var> state 170
  state 170: #19 #21
  state 171: #20 #21 #22
	<var> state 172
  state 172: #20 #21 #22
	<var> state 173
  state 173: #20 #21 #22
}
{
  rule #0: x::int*y::int = x*y
  rule #1: x::double*y::double = x*y
  rule #2: x::int*y::double = x*y
  rule #3: x::double*y::int = x*y
  rule #4: x::bigint*y::bigint = bigint_mul x y
  rule #5: x::int*y::bigint = bigint x*y
  rule #6: x::bigint*y::int = x*bigint y
  rule #7: x::bigint*y::double = double x*y
  rule #8: x::double*y::bigint = x*double y
  rule #9: (x1+:y1)*(x2+:y2) = x1*x2-y1*y2+:x1*y2+y1*x2
  rule #10: (r1<:t1)*(r2<:t2) = r1*r2<:t1+t2
  rule #11: z1@(x1+:y1)*z2@(r2<:t2) = z1*rect z2
  rule #12: z1@(r1<:t1)*z2@(x2+:y2) = rect z1*z2
  rule #13: (x1+:y1)*x2 = x1*x2+:y1*x2
  rule #14: x1*(x2+:y2) = x1*x2+:x1*y2
  rule #15: (r1<:t1)*x2 = r1*x2<:t1
  rule #16: x1*(r2<:t2) = x1*r2<:t2
  rule #17: x1%y1*(x2%y2) = x1*x2%(y1*y2)
  rule #18: x1%y1*x2 = x1*x2%y1
  rule #19: x1*(x2%y2) = x1*x2%y2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19
	<var> state 1
	<var>::int state 13
	<var>::bigint state 28
	<var>::double state 43
	<app> state 58
  state 1: #14 #16 #19
	<app> state 2
  state 2: #14 #16 #19
	<app> state 3
  state 3: #14 #16 #19
	+: state 4
	<: state 7
	% state 10
  state 4: #14
	<var> state 5
  state 5: #14
	<var> state 6
  state 6: #14
  state 7: #16
	<var> state 8
  state 8: #16
	<var> state 9
  state 9: #16
  state 10: #19
	<var> state 11
  state 11: #19
	<var> state 12
  state 12: #19
  state 13: #0 #2 #5 #14 #16 #19
	<var>::int state 14
	<var>::bigint state 15
	<var>::double state 16
	<app> state 17
  state 14: #0
  state 15: #5
  state 16: #2
  state 17: #14 #16 #19
	<app> state 18
  state 18: #14 #16 #19
	+: state 19
	<: state 22
	% state 25
  state 19: #14
	<var> state 20
  state 20: #14
	<var> state 21
  state 21: #14
  state 22: #16
	<var> state 23
  state 23: #16
	<var> state 24
  state 24: #16
  state 25: #19
	<var> state 26
  state 26: #19
	<var> state 27
  state 27: #19
  state 28: #4 #6 #7 #14 #16 #19
	<var>::int state 29
	<var>::bigint state 30
	<var>::double state 31
	<app> state 32
  state 29: #6
  state 30: #4
  state 31: #7
  state 32: #14 #16 #19
	<app> state 33
  state 33: #14 #16 #19
	+: state 34
	<: state 37
	% state 40
  state 34: #14
	<var> state 35
  state 35: #14
	<var> state 36
  state 36: #14
  state 37: #16
	<var> state 38
  state 38: #16
	<var> state 39
  state 39: #16
  state 40: #19
	<var> state 41
  state 41: #19
	<var> state 42
  state 42: #19
  state 43: #1 #3 #8 #14 #16 #19
	<var>::int state 44
	<var>::bigint state 45
	<var>::double state 46
	<app> state 47
  state 44: #3
  state 45: #8
  state 46: #1
  state 47: #14 #16 #19
	<app> state 48
  state 48: #14 #16 #19
	+: state 49
	<: state 52
	% state 55
  state 49: #14
	<var> state 50
  state 50: #14
	<var> state 51
  state 51: #14
  state 52: #16
	<var> state 53
  state 53: #16
	<var> state 54
  state 54: #16
  state 55: #19
	<var> state 56
  state 56: #19
	<var> state 57
  state 57: #19
  state 58: #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19
	<var> state 59
	<app> state 72
  state 59: #14 #16 #19
	<var> state 60
  state 60: #14 #16 #19
	<app> state 61
  state 61: #14 #16 #19
	<app> state 62
  state 62: #14 #16 #19
	+: state 63
	<: state 66
	% state 69
  state 63: #14
	<var> state 64
  state 64: #14
	<var> state 65
  state 65: #14
  state 66: #16
	<var> state 67
  state 67: #16
	<var> state 68
  state 68: #16
  state 69: #19
	<var> state 70
  state 70: #19
	<var> state 71
  state 71: #19
  state 72: #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19
	<var> state 73
	+: state 87
	<: state 107
	% state 127
  state 73: #14 #16 #19
	<var> state 74
  state 74: #14 #16 #19
	<var> state 75
  state 75: #14 #16 #19
	<app> state 76
  state 76: #14 #16 #19
	<app> state 77
  state 77: #14 #16 #19
	+: state 78
	<: state 81
	% state 84
  state 78: #14
	<var> state 79
  state 79: #14
	<var> state 80
  state 80: #14
  state 81: #16
	<var> state 82
  state 82: #16
	<var> state 83
  state 83: #16
  state 84: #19
	<var> state 85
  state 85: #19
	<var> state 86
  state 86: #19
  state 87: #9 #11 #13 #14 #16 #19
	<var> state 88
  state 88: #9 #11 #13 #14 #16 #19
	<var> state 89
  state 89: #9 #11 #13 #14 #16 #19
	<var> state 90
	<app> state 91
  state 90: #13
  state 91: #9 #11 #13 #14 #16 #19
	<var> state 92
	<app> state 94
  state 92: #13
	<var> state 93
  state 93: #13
  state 94: #9 #11 #13 #14 #16 #19
	<var> state 95
	+: state 98
	<: state 101
	% state 104
  state 95: #13
	<var> state 96
  state 96: #13
	<var> state 97
  state 97: #13
  state 98: #9 #13 #14
	<var> state 99
  state 99: #9 #13 #14
	<var> state 100
  state 100: #9 #13 #14
  state 101: #11 #13 #16
	<var> state 102
  state 102: #11 #13 #16
	<var> state 103
  state 103: #11 #13 #16
  state 104: #13 #19
	<var> state 105
  state 105: #13 #19
	<var> state 106
  state 106: #13 #19
  state 107: #10 #12 #14 #15 #16 #19
	<var> state 108
  state 108: #10 #12 #14 #15 #16 #19
	<var> state 109
  state 109: #10 #12 #14 #15 #16 #19
	<var> state 110
	<app> state 111
  state 110: #15
  state 111: #10 #12 #14 #15 #16 #19
	<var> state 112
	<app> state 114
  state 112: #15
	<var> state 113
  state 113: #15
  state 114: #10 #12 #14 #15 #16 #19
	<var> state 115
	+: state 118
	<: state 121
	% state 124
  state 115: #15
	<var> state 116
  state 116: #15
	<var> state 117
  state 117: #15
  state 118: #12 #14 #15
	<var> state 119
  state 119: #12 #14 #15
	<var> state 120
  state 120: #12 #14 #15
  state 121: #10 #15 #16
	<var> state 122
  state 122: #10 #15 #16
	<var> state 123
  state 123: #10 #15 #16
  state 124: #15 #19
	<var> state 125
  state 125: #15 #19
	<var> state 126
  state 126: #15 #19
  state 127: #14 #16 #17 #18 #19
	<var> state 128
  state 128: #14 #16 #17 #18 #19
	<var> state 129
  state 129: #14 #16 #17 #18 #19
	<var> state 130
	<app> state 131
  state 130: #18
  state 131: #14 #16 #17 #18 #19
	<var> state 132
	<app> state 134
  state 132: #18
	<var> state 133
  state 133: #18
  state 134: #14 #16 #17 #18 #19
	<var> state 135
	+: state 138
	<: state 141
	% state 144
  state 135: #18
	<var> state 136
  state 136: #18
	<var> state 137
  state 137: #18
  state 138: #14 #18
	<var> state 139
  state 139: #14 #18
	<var> state 140
  state 140: #14 #18
  state 141: #16 #18
	<var> state 142
  state 142: #16 #18
	<var> state 143
  state 143: #16 #18
  state 144: #17 #18 #19
	<var> state 145
  state 145: #17 #18 #19
	<var> state 146
  state 146: #17 #18 #19
}
{
  rule #0: x::int/y::int = x/y
  rule #1: x::double/y::double = x/y
  rule #2: x::int/y::double = x/y
  rule #3: x::double/y::int = x/y
  rule #4: x::bigint/y::bigint = double x/double y
  rule #5: x::int/y::bigint = double x/y
  rule #6: x::bigint/y::int = x/double y
  rule #7: x::bigint/y::double = double x/y
  rule #8: x::double/y::bigint = x/double y
  rule #9: (x1+:y1)/(x2+:y2) = (x1*x2+y1*y2+:y1*x2-x1*y2)/(x2*x2+y2*y2)
  rule #10: (r1<:t1)/(r2<:t2) = r1/r2<:t1-t2
  rule #11: z1@(x1+:y1)/z2@(r2<:t2) = z1/rect z2
  rule #12: z1@(r1<:t1)/z2@(x2+:y2) = rect z1/z2
  rule #13: (x1+:y1)/x2 = x1/x2+:y1/x2
  rule #14: x1/z2@(x2+:y2) = (x1*x2+:-x1*y2)/(x2*x2+y2*y2)
  rule #15: (r1<:t1)/x2 = r1/x2<:t1
  rule #16: x1/(r2<:t2) = x1/r2<:-t2
  rule #17: x1%y1/(x2%y2) = x1*y2/(y1*x2)
  rule #18: x1%y1/x2 = x1/(y1*x2)
  rule #19: x1/(x2%y2) = x1*y2/x2
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19
	<var> state 1
	<var>::int state 13
	<var>::bigint state 28
	<var>::double state 43
	<app> state 58
  state 1: #14 #16 #19
	<app> state 2
  state 2: #14 #16 #19
	<app> state 3
  state 3: #14 #16 #19
	+: state 4
	<: state 7
	% state 10
  state 4: #14
	<var> state 5
  state 5: #14
	<var> state 6
  state 6: #14
  state 7: #16
	<var> state 8
  state 8: #16
	<var> state 9
  state 9: #16
  state 10: #19
	<var> state 11
  state 11: #19
	<var> state 12
  state 12: #19
  state 13: #0 #2 #5 #14 #16 #19
	<var>::int state 14
	<var>::bigint state 15
	<var>::double state 16
	<app> state 17
  state 14: #0
  state 15: #5
  state 16: #2
  state 17: #14 #16 #19
	<app> state 18
  state 18: #14 #16 #19
	+: state 19
	<: state 22
	% state 25
  state 19: #14
	<var> state 20
  state 20: #14
	<var> state 21
  state 21: #14
  state 22: #16
	<var> state 23
  state 23: #16
	<var> state 24
  state 24: #16
  state 25: #19
	<var> state 26
  state 26: #19
	<var> state 27
  state 27: #19
  state 28: #4 #6 #7 #14 #16 #19
	<var>::int state 29
	<var>::bigint state 30
	<var>::double state 31
	<app> state 32
  state 29: #6
  state 30: #4
  state 31: #7
  state 32: #14 #16 #19
	<app> state 33
  state 33: #14 #16 #19
	+: state 34
	<: state 37
	% state 40
  state 34: #14
	<var> state 35
  state 35: #14
	<var> state 36
  state 36: #14
  state 37: #16
	<var> state 38
  state 38: #16
	<var> state 39
  state 39: #16
  state 40: #19
	<var> state 41
  state 41: #19
	<var> state 42
  state 42: #19
  state 43: #1 #3 #8 #14 #16 #19
	<var>::int state 44
	<var>::bigint state 45
	<var>::double state 46
	<app> state 47
  state 44: #3
  state 45: #8
  state 46: #1
  state 47: #14 #16 #19
	<app> state 48
  state 48: #14 #16 #19
	+: state 49
	<: state 52
	% state 55
  state 49: #14
	<var> state 50
  state 50: #14
	<var> state 51
  state 51: #14
  state 52: #16
	<var> state 53
  state 53: #16
	<var> state 54
  state 54: #16
  state 55: #19
	<var> state 56
  state 56: #19
	<var> state 57
  state 57: #19
  state 58: #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19
	<var> state 59
	<app> state 72
  state 59: #14 #16 #19
	<var> state 60
  state 60: #14 #16 #19
	<app> state 61
  state 61: #14 #16 #19
	<app> state 62
  state 62: #14 #16 #19
	+: state 63
	<: state 66
	% state 69
  state 63: #14
	<var> state 64
  state 64: #14
	<var> state 65
  state 65: #14
  state 66: #16
	<var> state 67
  state 67: #16
	<var> state 68
  state 68: #16
  state 69: #19
	<var> state 70
  state 70: #19
	<var> state 71
  state 71: #19
  state 72: #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19
	<var> state 73
	+: state 87
	<: state 107
	% state 127
  state 73: #14 #16 #19
	<var> state 74
  state 74: #14 #16 #19
	<var> state 75
  state 75: #14 #16 #19
	<app> state 76
  state 76: #14 #16 #19
	<app> state 77
  state 77: #14 #16 #19
	+: state 78
	<: state 81
	% state 84
  state 78: #14
	<var> state 79
  state 79: #14
	<var> state 80
  state 80: #14
  state 81: #16
	<var> state 82
  state 82: #16
	<var> state 83
  state 83: #16
  state 84: #19
	<var> state 85
  state 85: #19
	<var> state 86
  state 86: #19
  state 87: #9 #11 #13 #14 #16 #19
	<var> state 88
  state 88: #9 #11 #13 #14 #16 #19
	<var> state 89
  state 89: #9 #11 #13 #14 #16 #19
	<var> state 90
	<app> state 91
  state 90: #13
  state 91: #9 #11 #13 #14 #16 #19
	<var> state 92
	<app> state 94
  state 92: #13
	<var> state 93
  state 93: #13
  state 94: #9 #11 #13 #14 #16 #19
	<var> state 95
	+: state 98
	<: state 101
	% state 104
  state 95: #13
	<var> state 96
  state 96: #13
	<var> state 97
  state 97: #13
  state 98: #9 #13 #14
	<var> state 99
  state 99: #9 #13 #14
	<var> state 100
  state 100: #9 #13 #14
  state 101: #11 #13 #16
	<var> state 102
  state 102: #11 #13 #16
	<var> state 103
  state 103: #11 #13 #16
  state 104: #13 #19
	<var> state 105
  state 105: #13 #19
	<var> state 106
  state 106: #13 #19
  state 107: #10 #12 #14 #15 #16 #19
	<var> state 108
  state 108: #10 #12 #14 #15 #16 #19
	<var> state 109
  state 109: #10 #12 #14 #15 #16 #19
	<var> state 110
	<app> state 111
  state 110: #15
  state 111: #10 #12 #14 #15 #16 #19
	<var> state 112
	<app> state 114
  state 112: #15
	<var> state 113
  state 113: #15
  state 114: #10 #12 #14 #15 #16 #19
	<var> state 115
	+: state 118
	<: state 121
	% state 124
  state 115: #15
	<var> state 116
  state 116: #15
	<var> state 117
  state 117: #15
  state 118: #12 #14 #15
	<var> state 119
  state 119: #12 #14 #15
	<var> state 120
  state 120: #12 #14 #15
  state 121: #10 #15 #16
	<var> state 122
  state 122: #10 #15 #16
	<var> state 123
  state 123: #10 #15 #16
  state 124: #15 #19
	<var> state 125
  state 125: #15 #19
	<var> state 126
  state 126: #15 #19
  state 127: #14 #16 #17 #18 #19
	<var> state 128
  state 128: #14 #16 #17 #18 #19
	<var> state 129
  state 129: #14 #16 #17 #18 #19
	<var> state 130
	<app> state 131
  state 130: #18
  state 131: #14 #16 #17 #18 #19
	<var> state 132
	<app> state 134
  state 132: #18
	<var> state 133
  state 133: #18
  state 134: #14 #16 #17 #18 #19
	<var> state 135
	+: state 138
	<: state 141
	% state 144
  state 135: #18
	<var> state 136
  state 136: #18
	<var> state 137
  state 137: #18
  state 138: #14 #18
	<var> state 139
  state 139: #14 #18
	<var> state 140
  state 140: #14 #18
  state 141: #16 #18
	<var> state 142
  state 142: #16 #18
	<var> state 143
  state 143: #16 #18
  state 144: #17 #18 #19
	<var> state 145
  state 145: #17 #18 #19
	<var> state 146
  state 146: #17 #18 #19
}
{
  rule #0: x::double^y::double = c_pow x y if x>=0||int y==y
  rule #1: x::int^y::int = c_pow (double x) (double y)
  rule #2: x::bigint^y::bigint = c_pow (double x) (double y)
  rule #3: x::int^y::bigint = c_pow (double x) (double y)
  rule #4: x::bigint^y::int = c_pow (double x) (double y)
  rule #5: x::double^y::int = c_pow x (double y)
  rule #6: x::double^y::bigint = c_pow x (double y)
  rule #7: x::int^y::double = c_pow (double x) y if x>=0||int y==y
  rule #8: x::bigint^y::double = c_pow (double x) y if x>=0||int y==y
  rule #9: x::int^y::double = double x^y
  rule #10: x::bigint^y::double = double x^y
  rule #11: z1@(x1+:y1)^z2@(x2+:y2) = polar z1^z2
  rule #12: z1@(x1+:y1)^z2@(r2<:t2) = polar z1^rect z2
  rule #13: (r1<:t1)^z2@(x2+:y2) = exp (ln r1*z2)*exp ((0+:t1)*z2)
  rule #14: (r1<:t1)^z2@(r2<:t2) = exp (ln r1*z2)*exp ((0+:t1)*z2)
  rule #15: z1@(x1+:y1)^x2 = z1^(x2+:0)
  rule #16: x1^z2@(x2+:y2) = (x1+:0)^z2
  rule #17: (r1<:t1)^x2 = r1^x2<:t1*x2
  rule #18: x1^z2@(r2<:t2) = (x1<:0)^z2
  rule #19: x1::double^x2::double = exp (ln x1*x2) if x1<0
  rule #20: (x1%y1)^(x2%y2) = (x1/y1)^(x2/y2)
  rule #21: (x1%y1)^x2 = (x1/y1)^x2
  rule #22: x1^(x2%y2) = x1^(x2/y2)
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22
	<var> state 1
	<var>::int state 13
	<var>::bigint state 28
	<var>::double state 43
	<app> state 58
  state 1: #16 #18 #22
	<app> state 2
  state 2: #16 #18 #22
	<app> state 3
  state 3: #16 #18 #22
	+: state 4
	<: state 7
	% state 10
  state 4: #16
	<var> state 5
  state 5: #16
	<var> state 6
  state 6: #16
  state 7: #18
	<var> state 8
  state 8: #18
	<var> state 9
  state 9: #18
  state 10: #22
	<var> state 11
  state 11: #22
	<var> state 12
  state 12: #22
  state 13: #1 #3 #7 #9 #16 #18 #22
	<var>::int state 14
	<var>::bigint state 15
	<var>::double state 16
	<app> state 17
  state 14: #1
  state 15: #3
  state 16: #7 #9
  state 17: #16 #18 #22
	<app> state 18
  state 18: #16 #18 #22
	+: state 19
	<: state 22
	% state 25
  state 19: #16
	<var> state 20
  state 20: #16
	<var> state 21
  state 21: #16
  state 22: #18
	<var> state 23
  state 23: #18
	<var> state 24
  state 24: #18
  state 25: #22
	<var> state 26
  state 26: #22
	<var> state 27
  state 27: #22
  state 28: #2 #4 #8 #10 #16 #18 #22
	<var>::int state 29
	<var>::bigint state 30
	<var>::double state 31
	<app> state 32
  state 29: #4
  state 30: #2
  state 31: #8 #10
  state 32: #16 #18 #22
	<app> state 33
  state 33: #16 #18 #22
	+: state 34
	<: state 37
	% state 40
  state 34: #16
	<var> state 35
  state 35: #16
	<var> state 36
  state 36: #16
  state 37: #18
	<var> state 38
  state 38: #18
	<var> state 39
  state 39: #18
  state 40: #22
	<var> state 41
  state 41: #22
	<var> state 42
  state 42: #22
  state 43: #0 #5 #6 #16 #18 #19 #22
	<var>::int state 44
	<var>::bigint state 45
	<var>::double state 46
	<app> state 47
  state 44: #5
  state 45: #6
  state 46: #0 #19
  state 47: #16 #18 #22
	<app> state 48
  state 48: #16 #18 #22
	+: state 49
	<: state 52
	% state 55
  state 49: #16
	<var> state 50
  state 50: #16
	<var> state 51
  state 51: #16
  state 52: #18
	<var> state 53
  state 53: #18
	<var> state 54
  state 54: #18
  state 55: #22
	<var> state 56
  state 56: #22
	<var> state 57
  state 57: #22
  state 58: #11 #12 #13 #14 #15 #16 #17 #18 #20 #21 #22
	<var> state 59
	<app> state 72
  state 59: #16 #18 #22
	<var> state 60
  state 60: #16 #18 #22
	<app> state 61
  state 61: #16 #18 #22
	<app> state 62
  state 62: #16 #18 #22
	+: state 63
	<: state 66
	% state 69
  state 63: #16
	<var> state 64
  state 64: #16
	<var> state 65
  state 65: #16
  state 66: #18
	<var> state 67
  state 67: #18
	<var> state 68
  state 68: #18
  state 69: #22
	<var> state 70
  state 70: #22
	<var> state 71
  state 71: #22
  state 72: #11 #12 #13 #14 #15 #16 #17 #18 #20 #21 #22
	<var> state 73
	+: state 87
	<: state 107
	% state 127
  state 73: #16 #18 #22
	<var> state 74
  state 74: #16 #18 #22
	<var> state 75
  state 75: #16 #18 #22
	<app> state 76
  state 76: #16 #18 #22
	<app> state 77
  state 77: #16 #18 #22
	+: state 78
	<: state 81
	% state 84
  state 78: #16
	<var> state 79
  state 79: #16
	<var> state 80
  state 80: #16
  state 81: #18
	<var> state 82
  state 82: #18
	<var> state 83
  state 83: #18
  state 84: #22
	<var> state 85
  state 85: #22
	<var> state 86
  state 86: #22
  state 87: #11 #12 #15 #16 #18 #22
	<var> state 88
  state 88: #11 #12 #15 #16 #18 #22
	<var> state 89
  state 89: #11 #12 #15 #16 #18 #22
	<var> state 90
	<app> state 91
  state 90: #15
  state 91: #11 #12 #15 #16 #18 #22
	<var> state 92
	<app> state 94
  state 92: #15
	<var> state 93
  state 93: #15
  state 94: #11 #12 #15 #16 #18 #22
	<var> state 95
	+: state 98
	<: state 101
	% state 104
  state 95: #15
	<var> state 96
  state 96: #15
	<var> state 97
  state 97: #15
  state 98: #11 #15 #16
	<var> state 99
  state 99: #11 #15 #16
	<var> state 100
  state 100: #11 #15 #16
  state 101: #12 #15 #18
	<var> state 102
  state 102: #12 #15 #18
	<var> state 103
  state 103: #12 #15 #18
  state 104: #15 #22
	<var> state 105
  state 105: #15 #22
	<var> state 106
  state 106: #15 #22
  state 107: #13 #14 #16 #17 #18 #22
	<var> state 108
  state 108: #13 #14 #16 #17 #18 #22
	<var> state 109
  state 109: #13 #14 #16 #17 #18 #22
	<var> state 110
	<app> state 111
  state 110: #17
  state 111: #13 #14 #16 #17 #18 #22
	<var> state 112
	<app> state 114
  state 112: #17
	<var> state 113
  state 113: #17
  state 114: #13 #14 #16 #17 #18 #22
	<var> state 115
	+: state 118
	<: state 121
	% state 124
  state 115: #17
	<var> state 116
  state 116: #17
	<var> state 117
  state 117: #17
  state 118: #13 #16 #17
	<var> state 119
  state 119: #13 #16 #17
	<var> state 120
  state 120: #13 #16 #17
  state 121: #14 #17 #18
	<var> state 122
  state 122: #14 #17 #18
	<var> state 123
  state 123: #14 #17 #18
  state 124: #17 #22
	<var> state 125
  state 125: #17 #22
	<var> state 126
  state 126: #17 #22
  state 127: #16 #18 #20 #21 #22
	<var> state 128
  state 128: #16 #18 #20 #21 #22
	<var> state 129
  state 129: #16 #18 #20 #21 #22
	<var> state 130
	<app> state 131
  state 130: #21
  state 131: #16 #18 #20 #21 #22
	<var> state 132
	<app> state 134
  state 132: #21
	<var> state 133
  state 133: #21
  state 134: #16 #18 #20 #21 #22
	<var> state 135
	+: state 138
	<: state 141
	% state 144
  state 135: #21
	<var> state 136
  state 136: #21
	<var> state 137
  state 137: #21
  state 138: #16 #21
	<var> state 139
  state 139: #16 #21
	<var> state 140
  state 140: #16 #21
  state 141: #18 #21
	<var> state 142
  state 142: #18 #21
	<var> state 143
  state 143: #18 #21
  state 144: #20 #21 #22
	<var> state 145
  state 145: #20 #21 #22
	<var> state 146
  state 146: #20 #21 #22
}
{
  rule #0: arg (x+:y) = atan2 y x
  rule #1: arg (r<:t) = t
  rule #2: arg x::int = atan2 0 x
  rule #3: arg x::bigint = atan2 0 x
  rule #4: arg x::double = atan2 0 x
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #2
  state 2: #3
  state 3: #4
  state 4: #0 #1
	<app> state 5
  state 5: #0 #1
	+: state 6
	<: state 9
  state 6: #0
	<var> state 7
  state 7: #0
	<var> state 8
  state 8: #0
  state 9: #1
	<var> state 10
  state 10: #1
	<var> state 11
  state 11: #1
}
{
  rule #0: int x::int = x
  rule #1: int x::bigint = pure_intval x
  rule #2: int x::double = pure_intval x
  rule #3: int x = pure_intval x
  rule #4: int x@(_%_) = int (bigint x)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<var> state 4
	<app> state 5
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3
  state 5: #4
	<app> state 6
  state 6: #4
	% state 7
  state 7: #4
	<var> state 8
  state 8: #4
	<var> state 9
  state 9: #4
}
{
  rule #0: -x::int = -x
  rule #1: -x::double = -x
  rule #2: -x::bigint = bigint_neg x
  rule #3: -(x+:y) = -x+:-y
  rule #4: -(r<:t) = r<:t+3.14159265358979
  rule #5: -x%y = (-x)%y
  state 0: #0 #1 #2 #3 #4 #5
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #0
  state 2: #2
  state 3: #1
  state 4: #3 #4 #5
	<app> state 5
  state 5: #3 #4 #5
	+: state 6
	<: state 9
	% state 12
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
  state 12: #5
	<var> state 13
  state 13: #5
	<var> state 14
  state 14: #5
}
{
  rule #0: bigint x::bigint = x
  rule #1: bigint x::int = pure_bigintval x
  rule #2: bigint x::double = pure_bigintval x
  rule #3: bigint x = pure_bigintval x
  rule #4: bigint x@(_%_) = trunc x
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<var> state 4
	<app> state 5
  state 1: #1
  state 2: #0
  state 3: #2
  state 4: #3
  state 5: #4
	<app> state 6
  state 6: #4
	% state 7
  state 7: #4
	<var> state 8
  state 8: #4
	<var> state 9
  state 9: #4
}
{
  rule #0: double x::double = x
  rule #1: double x::int = pure_dblval x
  rule #2: double x::bigint = pure_dblval x
  rule #3: double (x%y) = x/y
  state 0: #0 #1 #2 #3
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #0
  state 4: #3
	<app> state 5
  state 5: #3
	% state 6
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
}
{
  rule #0: pow x::int y::int = bigint_pow (bigint x) y if y>=0
  rule #1: pow x::bigint y::bigint = bigint_pow x (int y) if int y>=0
  rule #2: pow x::double y::double = c_pow x y if x>=0||int y==y
  rule #3: pow x::int y::bigint = bigint_pow (bigint x) (int y) if y>=0
  rule #4: pow x::bigint y::int = bigint_pow x y if y>=0
  rule #5: pow x::double y::int = c_pow x (double y)
  rule #6: pow x::double y::bigint = c_pow x (double y)
  rule #7: pow x::int y::double = c_pow (double x) y if x>=0||int y==y
  rule #8: pow x::bigint y::double = c_pow (double x) y if x>=0||int y==y
  rule #9: pow (x%y) n::int = pow x n%pow y n if n>0
  rule #10: pow (x%y) n::bigint = pow x n%pow y n if n>0
  rule #11: pow (x%y) n::int = pow y (-n)%pow x (-n) if n<0
  rule #12: pow (x%y) n::bigint = pow y (-n)%pow x (-n) if n<0
  rule #13: pow (x%y) n::int = 1L%1L
  rule #14: pow (x%y) n::bigint = 1L%1L
  rule #15: pow (x%y) n::double = pow (x/y) n
  rule #16: pow (x%y) (n%m) = pow (x/y) (n/m)
  rule #17: pow x::int n::int = 1%pow x (-n) if n<0
  rule #18: pow x::int n::bigint = 1%pow x (-n) if n<0
  rule #19: pow x::bigint n::int = 1%pow x (-n) if n<0
  rule #20: pow x::bigint n::bigint = 1%pow x (-n) if n<0
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20
	<var>::int state 1
	<var>::bigint state 5
	<var>::double state 9
	<app> state 13
  state 1: #0 #3 #7 #17 #18
	<var>::int state 2
	<var>::bigint state 3
	<var>::double state 4
  state 2: #0 #17
  state 3: #3 #18
  state 4: #7
  state 5: #1 #4 #8 #19 #20
	<var>::int state 6
	<var>::bigint state 7
	<var>::double state 8
  state 6: #4 #19
  state 7: #1 #20
  state 8: #8
  state 9: #2 #5 #6
	<var>::int state 10
	<var>::bigint state 11
	<var>::double state 12
  state 10: #5
  state 11: #6
  state 12: #2
  state 13: #9 #10 #11 #12 #13 #14 #15 #16
	<app> state 14
  state 14: #9 #10 #11 #12 #13 #14 #15 #16
	% state 15
  state 15: #9 #10 #11 #12 #13 #14 #15 #16
	<var> state 16
  state 16: #9 #10 #11 #12 #13 #14 #15 #16
	<var> state 17
  state 17: #9 #10 #11 #12 #13 #14 #15 #16
	<var>::int state 18
	<var>::bigint state 19
	<var>::double state 20
	<app> state 21
  state 18: #9 #11 #13
  state 19: #10 #12 #14
  state 20: #15
  state 21: #16
	<app> state 22
  state 22: #16
	% state 23
  state 23: #16
	<var> state 24
  state 24: #16
	<var> state 25
  state 25: #16
}
{
  rule #0: abs x::int = if x>=0 then x else -x
  rule #1: abs x::bigint = if x>=0 then x else -x
  rule #2: abs x::double = if x>=0 then x else -x
  rule #3: abs (x+:y) = sqrt (x*x+y*y)
  rule #4: abs (r<:t) = r
  rule #5: abs (x%y) = abs x%y
  state 0: #0 #1 #2 #3 #4 #5
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3 #4 #5
	<app> state 5
  state 5: #3 #4 #5
	+: state 6
	<: state 9
	% state 12
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
  state 12: #5
	<var> state 13
  state 13: #5
	<var> state 14
  state 14: #5
}
{
  rule #0: sgn x::int = if x>0 then 1 else if x<0 then -1 else 0
  rule #1: sgn x::bigint = if x>0 then 1 else if x<0 then -1 else 0
  rule #2: sgn x::double = if x>0 then 1 else if x<0 then -1 else 0
  rule #3: sgn (x%y) = sgn x
  state 0: #0 #1 #2 #3
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3
	<app> state 5
  state 5: #3
	% state 6
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
}
{
  rule #0: floor x::int = x
  rule #1: floor x::bigint = x
  rule #2: floor x@(_%_) = if n<=x then n else n-1 when n::bigint = trunc x end
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2
	<app> state 4
  state 4: #2
	% state 5
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
}
{
  rule #0: ceil x::int = x
  rule #1: ceil x::bigint = x
  rule #2: ceil x@(_%_) = -floor (-x)
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2
	<app> state 4
  state 4: #2
	% state 5
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
}
{
  rule #0: round x::int = x
  rule #1: round x::bigint = x
  rule #2: round (x%y) = -round ((-x)%y) if x<0
  rule #3: round (x%y) = x div 2+1 if y==2
  rule #4: round (x%y) = (2*x+y) div (2*y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	% state 5
  state 5: #2 #3 #4
	<var> state 6
  state 6: #2 #3 #4
	<var> state 7
  state 7: #2 #3 #4
}
{
  rule #0: trunc x::int = x
  rule #1: trunc x::bigint = x
  rule #2: trunc (x%y) = x div y
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2
	<app> state 4
  state 4: #2
	% state 5
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
}
{
  rule #0: frac x::int = x-trunc x
  rule #1: frac x::bigint = x-trunc x
  rule #2: frac x::double = x-trunc x
  rule #3: frac x@(_%_) = x-trunc x
  state 0: #0 #1 #2 #3
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #0
  state 2: #1
  state 3: #2
  state 4: #3
	<app> state 5
  state 5: #3
	% state 6
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
}
{
  rule #0: sqrt x::double = c_sqrt x if x>=0
  rule #1: sqrt x::int = sqrt (double x)
  rule #2: sqrt x::bigint = sqrt (double x)
  rule #3: sqrt (x+:y) = sqrt (x*x+y*y)*(cos (t/2)+:sin (t/2))
  rule #4: sqrt (r<:t) = sqrt r<:t/2
  rule #5: sqrt x::double = 0.0+:sqrt (-x) if x<0
  rule #6: sqrt (x%y) = sqrt (x/y)
  state 0: #0 #1 #2 #3 #4 #5 #6
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #0 #5
  state 4: #3 #4 #6
	<app> state 5
  state 5: #3 #4 #6
	+: state 6
	<: state 9
	% state 12
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
  state 12: #6
	<var> state 13
  state 13: #6
	<var> state 14
  state 14: #6
}
{
  rule #0: exp x::int = exp (double x)
  rule #1: exp x::bigint = exp (double x)
  rule #2: exp (x+:y) = exp x*(cos y+:sin y)
  rule #3: exp (r<:t) = exp (r*cos t)<:r*sin t
  rule #4: exp (x%y) = exp (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: ln x::double = c_log x if x>=0.0
  rule #1: ln x::int = ln (double x)
  rule #2: ln x::bigint = ln (double x)
  rule #3: ln z@(x+:y) = ln (abs z)+:arg z
  rule #4: ln (r<:t) = polar (ln r+:t)
  rule #5: ln x::double = ln (abs x)+:arg x if x<0
  rule #6: ln (x%y) = ln (x/y)
  state 0: #0 #1 #2 #3 #4 #5 #6
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #0 #5
  state 4: #3 #4 #6
	<app> state 5
  state 5: #3 #4 #6
	+: state 6
	<: state 9
	% state 12
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
  state 12: #6
	<var> state 13
  state 13: #6
	<var> state 14
  state 14: #6
}
{
  rule #0: log x::double = c_log x/c_log 10.0 if x>=0.0
  rule #1: log x::int = log (double x)
  rule #2: log x::bigint = log (double x)
  rule #3: log z@(x+:y) = ln z/ln 10
  rule #4: log z@(r<:t) = ln z/ln 10
  rule #5: log x::double = ln x/ln 10 if x<0
  rule #6: log (x%y) = log (x/y)
  state 0: #0 #1 #2 #3 #4 #5 #6
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #0 #5
  state 4: #3 #4 #6
	<app> state 5
  state 5: #3 #4 #6
	+: state 6
	<: state 9
	% state 12
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
  state 12: #6
	<var> state 13
  state 13: #6
	<var> state 14
  state 14: #6
}
{
  rule #0: sin x::int = sin (double x)
  rule #1: sin x::bigint = sin (double x)
  rule #2: sin (x+:y) = sin x*cosh y+:cos x*sinh y
  rule #3: sin z@(r<:t) = polar$sin$rect z
  rule #4: sin (x%y) = sin (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: cos x::int = cos (double x)
  rule #1: cos x::bigint = cos (double x)
  rule #2: cos (x+:y) = cos x*cosh y+:-sin x*sinh y
  rule #3: cos z@(r<:t) = polar$cos$rect z
  rule #4: cos (x%y) = cos (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: tan x::int = tan (double x)
  rule #1: tan x::bigint = tan (double x)
  rule #2: tan (x+:y) = (sin (2*x)+:sinh (2*y))/(cos (2*x)+cosh (2*y))
  rule #3: tan z@(r<:t) = polar$tan$rect z
  rule #4: tan (x%y) = tan (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: asin x::int = asin (double x)
  rule #1: asin x::bigint = asin (double x)
  rule #2: asin z@(x+:y) = -(0+:1)*ln ((0+:1)*z+sqrt (1-z*z))
  rule #3: asin z@(r<:t) = -(0+:1)*ln ((0+:1)*z+sqrt (1-z*z))
  rule #4: asin (x%y) = asin (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: acos x::int = acos (double x)
  rule #1: acos x::bigint = acos (double x)
  rule #2: acos z@(x+:y) = -(0+:1)*ln (z+sqrt (z*z-1))
  rule #3: acos z@(r<:t) = -(0+:1)*ln (z+sqrt (z*z-1))
  rule #4: acos (x%y) = acos (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: atan x::int = atan (double x)
  rule #1: atan x::bigint = atan (double x)
  rule #2: atan z@(x+:y) = 0.0+:inf if z==0+:1
  rule #3: atan z@(r<:t) = 0.0+:inf if z==0+:1
  rule #4: atan z@(x+:y) = 0.0+:-inf if z==-(0+:1)
  rule #5: atan z@(r<:t) = 0.0+:-inf if z==-(0+:1)
  rule #6: atan z@(x+:y) = -(0+:1)*0.5*ln ((1+(0+:1)*z)/(1-(0+:1)*z))
  rule #7: atan z@(r<:t) = -(0+:1)*0.5*ln ((1+(0+:1)*z)/(1-(0+:1)*z))
  rule #8: atan (x%y) = atan (x/y)
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4 #5 #6 #7 #8
	<app> state 4
  state 4: #2 #3 #4 #5 #6 #7 #8
	+: state 5
	<: state 8
	% state 11
  state 5: #2 #4 #6
	<var> state 6
  state 6: #2 #4 #6
	<var> state 7
  state 7: #2 #4 #6
  state 8: #3 #5 #7
	<var> state 9
  state 9: #3 #5 #7
	<var> state 10
  state 10: #3 #5 #7
  state 11: #8
	<var> state 12
  state 12: #8
	<var> state 13
  state 13: #8
}
{
  rule #0: atan2 x::int y::int = atan2 (double x) (double y)
  rule #1: atan2 x::bigint y::bigint = atan2 (double x) (double y)
  rule #2: atan2 x::bigint y::int = atan2 (double x) (double y)
  rule #3: atan2 x::int y::bigint = atan2 (double x) (double y)
  rule #4: atan2 x::int y::double = atan2 (double x) y
  rule #5: atan2 x::bigint y::double = atan2 (double x) y
  rule #6: atan2 x::double y::int = atan2 x (double y)
  rule #7: atan2 x::double y::bigint = atan2 x (double y)
  rule #8: atan2 (x%y) z = atan2 (x/y) z
  rule #9: atan2 x (y%z) = atan2 x (y/z)
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9
	<var> state 1
	<var>::int state 7
	<var>::bigint state 16
	<var>::double state 25
	<app> state 33
  state 1: #9
	<app> state 2
  state 2: #9
	<app> state 3
  state 3: #9
	% state 4
  state 4: #9
	<var> state 5
  state 5: #9
	<var> state 6
  state 6: #9
  state 7: #0 #3 #4 #9
	<var>::int state 8
	<var>::bigint state 9
	<var>::double state 10
	<app> state 11
  state 8: #0
  state 9: #3
  state 10: #4
  state 11: #9
	<app> state 12
  state 12: #9
	% state 13
  state 13: #9
	<var> state 14
  state 14: #9
	<var> state 15
  state 15: #9
  state 16: #1 #2 #5 #9
	<var>::int state 17
	<var>::bigint state 18
	<var>::double state 19
	<app> state 20
  state 17: #2
  state 18: #1
  state 19: #5
  state 20: #9
	<app> state 21
  state 21: #9
	% state 22
  state 22: #9
	<var> state 23
  state 23: #9
	<var> state 24
  state 24: #9
  state 25: #6 #7 #9
	<var>::int state 26
	<var>::bigint state 27
	<app> state 28
  state 26: #6
  state 27: #7
  state 28: #9
	<app> state 29
  state 29: #9
	% state 30
  state 30: #9
	<var> state 31
  state 31: #9
	<var> state 32
  state 32: #9
  state 33: #8 #9
	<var> state 34
	<app> state 41
  state 34: #9
	<var> state 35
  state 35: #9
	<app> state 36
  state 36: #9
	<app> state 37
  state 37: #9
	% state 38
  state 38: #9
	<var> state 39
  state 39: #9
	<var> state 40
  state 40: #9
  state 41: #8 #9
	<var> state 42
	% state 50
  state 42: #9
	<var> state 43
  state 43: #9
	<var> state 44
  state 44: #9
	<app> state 45
  state 45: #9
	<app> state 46
  state 46: #9
	% state 47
  state 47: #9
	<var> state 48
  state 48: #9
	<var> state 49
  state 49: #9
  state 50: #8 #9
	<var> state 51
  state 51: #8 #9
	<var> state 52
  state 52: #8 #9
	<var> state 53
	<app> state 54
  state 53: #8
  state 54: #8 #9
	<var> state 55
	<app> state 57
  state 55: #8
	<var> state 56
  state 56: #8
  state 57: #8 #9
	<var> state 58
	% state 61
  state 58: #8
	<var> state 59
  state 59: #8
	<var> state 60
  state 60: #8
  state 61: #8 #9
	<var> state 62
  state 62: #8 #9
	<var> state 63
  state 63: #8 #9
}
{
  rule #0: sinh x::int = sinh (double x)
  rule #1: sinh x::bigint = sinh (double x)
  rule #2: sinh (x+:y) = sinh x*cos y+:cosh x*sin y
  rule #3: sinh z@(r<:t) = polar$sinh$rect z
  rule #4: sinh (x%y) = sinh (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: cosh x::int = cosh (double x)
  rule #1: cosh x::bigint = cosh (double x)
  rule #2: cosh (x+:y) = cosh x*cos y+:sinh x*sin y
  rule #3: cosh z@(r<:t) = polar$cosh$rect z
  rule #4: cosh (x%y) = cosh (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: tanh x::int = tanh (double x)
  rule #1: tanh x::bigint = tanh (double x)
  rule #2: tanh (x+:y) = (sinh (2*x)+:sin (2*y))/(cosh (2*x)+cos (2*y))
  rule #3: tanh z@(r<:t) = polar$tanh$rect z
  rule #4: tanh (x%y) = tanh (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: asinh x::int = asinh (double x)
  rule #1: asinh x::bigint = asinh (double x)
  rule #2: asinh z@(x+:y) = ln (z+sqrt (z*z+1))
  rule #3: asinh z@(r<:t) = ln (z+sqrt (z*z+1))
  rule #4: asinh (x%y) = asinh (x/y)
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #0
  state 2: #1
  state 3: #2 #3 #4
	<app> state 4
  state 4: #2 #3 #4
	+: state 5
	<: state 8
	% state 11
  state 5: #2
	<var> state 6
  state 6: #2
	<var> state 7
  state 7: #2
  state 8: #3
	<var> state 9
  state 9: #3
	<var> state 10
  state 10: #3
  state 11: #4
	<var> state 12
  state 12: #4
	<var> state 13
  state 13: #4
}
{
  rule #0: acosh x::double = c_acosh x if x>=1.0
  rule #1: acosh x::int = acosh (double x)
  rule #2: acosh x::bigint = acosh (double x)
  rule #3: acosh z@(x+:y) = ln (z+sqrt (z*z-1))
  rule #4: acosh z@(r<:t) = ln (z+sqrt (z*z-1))
  rule #5: acosh x::double = acosh (x+:0)
  rule #6: acosh (x%y) = acosh (x/y)
  state 0: #0 #1 #2 #3 #4 #5 #6
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #0 #5
  state 4: #3 #4 #6
	<app> state 5
  state 5: #3 #4 #6
	+: state 6
	<: state 9
	% state 12
  state 6: #3
	<var> state 7
  state 7: #3
	<var> state 8
  state 8: #3
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
  state 12: #6
	<var> state 13
  state 13: #6
	<var> state 14
  state 14: #6
}
{
  rule #0: atanh x::double = c_atanh x if abs x<=1.0
  rule #1: atanh x::int = atanh (double x)
  rule #2: atanh x::bigint = atanh (double x)
  rule #3: atanh z@(x+:y) = inf+:0.0 if z==1
  rule #4: atanh z@(r<:t) = inf+:0.0 if z==1
  rule #5: atanh z@(x+:y) = -inf+:0.0 if z==-1
  rule #6: atanh z@(r<:t) = -inf+:0.0 if z==-1
  rule #7: atanh z@(x+:y) = ln ((1+z)/(1-z))/2
  rule #8: atanh z@(r<:t) = ln ((1+z)/(1-z))/2
  rule #9: atanh x::double = atanh (x+:0)
  rule #10: atanh (x%y) = atanh (x/y)
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #0 #9
  state 4: #3 #4 #5 #6 #7 #8 #10
	<app> state 5
  state 5: #3 #4 #5 #6 #7 #8 #10
	+: state 6
	<: state 9
	% state 12
  state 6: #3 #5 #7
	<var> state 7
  state 7: #3 #5 #7
	<var> state 8
  state 8: #3 #5 #7
  state 9: #4 #6 #8
	<var> state 10
  state 10: #4 #6 #8
	<var> state 11
  state 11: #4 #6 #8
  state 12: #10
	<var> state 13
  state 13: #10
	<var> state 14
  state 14: #10
}
{
  rule #0: r::int<:t = -r<:t+3.14159265358979 if r<0
  rule #1: r::bigint<:t = -r<:t+3.14159265358979 if r<0
  rule #2: r::double<:t = -r<:t+3.14159265358979 if r<0
  rule #3: r<:t::int = r<:atan2 (sin t) (cos t) if t<-3.14159265358979||t>3.14159265358979
  rule #4: r<:t::bigint = r<:atan2 (sin t) (cos t) if t<-3.14159265358979||t>3.14159265358979
  rule #5: r<:t::double = r<:atan2 (sin t) (cos t) if t<-3.14159265358979||t>3.14159265358979
  rule #6: r<:t::int = r<:3.14159265358979 if t==-3.14159265358979
  rule #7: r<:t::bigint = r<:3.14159265358979 if t==-3.14159265358979
  rule #8: r<:t::double = r<:3.14159265358979 if t==-3.14159265358979
  rule #9: r@(_%_)<:t = -r<:t+3.14159265358979 if r<0
  rule #10: r<:t@(_%_) = r<:atan2 (sin t) (cos t) if t<-3.14159265358979||t>3.14159265358979
  rule #11: r<:t@(_%_) = r<:3.14159265358979 if t==-3.14159265358979
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11
	<var> state 1
	<var>::int state 10
	<var>::bigint state 25
	<var>::double state 40
	<app> state 55
  state 1: #3 #4 #5 #6 #7 #8 #10 #11
	<var>::int state 2
	<var>::bigint state 3
	<var>::double state 4
	<app> state 5
  state 2: #3 #6
  state 3: #4 #7
  state 4: #5 #8
  state 5: #10 #11
	<app> state 6
  state 6: #10 #11
	% state 7
  state 7: #10 #11
	<var> state 8
  state 8: #10 #11
	<var> state 9
  state 9: #10 #11
  state 10: #0 #3 #4 #5 #6 #7 #8 #10 #11
	<var> state 11
	<var>::int state 12
	<var>::bigint state 13
	<var>::double state 14
	<app> state 15
  state 11: #0
  state 12: #0 #3 #6
  state 13: #0 #4 #7
  state 14: #0 #5 #8
  state 15: #0 #10 #11
	<var> state 16
	<app> state 18
  state 16: #0
	<var> state 17
  state 17: #0
  state 18: #0 #10 #11
	<var> state 19
	% state 22
  state 19: #0
	<var> state 20
  state 20: #0
	<var> state 21
  state 21: #0
  state 22: #0 #10 #11
	<var> state 23
  state 23: #0 #10 #11
	<var> state 24
  state 24: #0 #10 #11
  state 25: #1 #3 #4 #5 #6 #7 #8 #10 #11
	<var> state 26
	<var>::int state 27
	<var>::bigint state 28
	<var>::double state 29
	<app> state 30
  state 26: #1
  state 27: #1 #3 #6
  state 28: #1 #4 #7
  state 29: #1 #5 #8
  state 30: #1 #10 #11
	<var> state 31
	<app> state 33
  state 31: #1
	<var> state 32
  state 32: #1
  state 33: #1 #10 #11
	<var> state 34
	% state 37
  state 34: #1
	<var> state 35
  state 35: #1
	<var> state 36
  state 36: #1
  state 37: #1 #10 #11
	<var> state 38
  state 38: #1 #10 #11
	<var> state 39
  state 39: #1 #10 #11
  state 40: #2 #3 #4 #5 #6 #7 #8 #10 #11
	<var> state 41
	<var>::int state 42
	<var>::bigint state 43
	<var>::double state 44
	<app> state 45
  state 41: #2
  state 42: #2 #3 #6
  state 43: #2 #4 #7
  state 44: #2 #5 #8
  state 45: #2 #10 #11
	<var> state 46
	<app> state 48
  state 46: #2
	<var> state 47
  state 47: #2
  state 48: #2 #10 #11
	<var> state 49
	% state 52
  state 49: #2
	<var> state 50
  state 50: #2
	<var> state 51
  state 51: #2
  state 52: #2 #10 #11
	<var> state 53
  state 53: #2 #10 #11
	<var> state 54
  state 54: #2 #10 #11
  state 55: #3 #4 #5 #6 #7 #8 #9 #10 #11
	<var> state 56
	<app> state 66
  state 56: #3 #4 #5 #6 #7 #8 #10 #11
	<var> state 57
  state 57: #3 #4 #5 #6 #7 #8 #10 #11
	<var>::int state 58
	<var>::bigint state 59
	<var>::double state 60
	<app> state 61
  state 58: #3 #6
  state 59: #4 #7
  state 60: #5 #8
  state 61: #10 #11
	<app> state 62
  state 62: #10 #11
	% state 63
  state 63: #10 #11
	<var> state 64
  state 64: #10 #11
	<var> state 65
  state 65: #10 #11
  state 66: #3 #4 #5 #6 #7 #8 #9 #10 #11
	<var> state 67
	% state 78
  state 67: #3 #4 #5 #6 #7 #8 #10 #11
	<var> state 68
  state 68: #3 #4 #5 #6 #7 #8 #10 #11
	<var> state 69
  state 69: #3 #4 #5 #6 #7 #8 #10 #11
	<var>::int state 70
	<var>::bigint state 71
	<var>::double state 72
	<app> state 73
  state 70: #3 #6
  state 71: #4 #7
  state 72: #5 #8
  state 73: #10 #11
	<app> state 74
  state 74: #10 #11
	% state 75
  state 75: #10 #11
	<var> state 76
  state 76: #10 #11
	<var> state 77
  state 77: #10 #11
  state 78: #3 #4 #5 #6 #7 #8 #9 #10 #11
	<var> state 79
  state 79: #3 #4 #5 #6 #7 #8 #9 #10 #11
	<var> state 80
  state 80: #3 #4 #5 #6 #7 #8 #9 #10 #11
	<var> state 81
	<var>::int state 82
	<var>::bigint state 83
	<var>::double state 84
	<app> state 85
  state 81: #9
  state 82: #3 #6 #9
  state 83: #4 #7 #9
  state 84: #5 #8 #9
  state 85: #9 #10 #11
	<var> state 86
	<app> state 88
  state 86: #9
	<var> state 87
  state 87: #9
  state 88: #9 #10 #11
	<var> state 89
	% state 92
  state 89: #9
	<var> state 90
  state 90: #9
	<var> state 91
  state 91: #9
  state 92: #9 #10 #11
	<var> state 93
  state 93: #9 #10 #11
	<var> state 94
  state 94: #9 #10 #11
}
{
  rule #0: complex z@(x+:y) = z
  rule #1: complex z@(r<:t) = z
  rule #2: complex x::int = x+:0
  rule #3: complex x::bigint = x+:0
  rule #4: complex x::double = x+:0.0
  rule #5: complex (x%y) = x%y+:0L%1L
  state 0: #0 #1 #2 #3 #4 #5
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #2
  state 2: #3
  state 3: #4
  state 4: #0 #1 #5
	<app> state 5
  state 5: #0 #1 #5
	+: state 6
	<: state 9
	% state 12
  state 6: #0
	<var> state 7
  state 7: #0
	<var> state 8
  state 8: #0
  state 9: #1
	<var> state 10
  state 10: #1
	<var> state 11
  state 11: #1
  state 12: #5
	<var> state 13
  state 13: #5
	<var> state 14
  state 14: #5
}
{
  rule #0: polar (x+:y) = sqrt (x*x+y*y)<:atan2 y x
  rule #1: polar x::int = x<:0
  rule #2: polar x::bigint = x<:0
  rule #3: polar x::double = x<:0.0
  rule #4: polar (x%y) = x%y<:0L%1L
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #3
  state 4: #0 #4
	<app> state 5
  state 5: #0 #4
	+: state 6
	% state 9
  state 6: #0
	<var> state 7
  state 7: #0
	<var> state 8
  state 8: #0
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
}
{
  rule #0: rect (r<:t) = r*cos t+:r*sin t
  rule #1: rect x::int = x+:0
  rule #2: rect x::bigint = x+:0
  rule #3: rect x::double = x+:0.0
  rule #4: rect (x%y) = x%y+:0L%1L
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #3
  state 4: #0 #4
	<app> state 5
  state 5: #0 #4
	<: state 6
	% state 9
  state 6: #0
	<var> state 7
  state 7: #0
	<var> state 8
  state 8: #0
  state 9: #4
	<var> state 10
  state 10: #4
	<var> state 11
  state 11: #4
}
{
  rule #0: cis t = rect (1<:t)
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: re (x+:y) = x
  rule #1: re (r<:t) = r*sin t
  rule #2: re x::int = x
  rule #3: re x::bigint = x
  rule #4: re x::double = x
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #2
  state 2: #3
  state 3: #4
  state 4: #0 #1
	<app> state 5
  state 5: #0 #1
	+: state 6
	<: state 9
  state 6: #0
	<var> state 7
  state 7: #0
	<var> state 8
  state 8: #0
  state 9: #1
	<var> state 10
  state 10: #1
	<var> state 11
  state 11: #1
}
{
  rule #0: im (x+:y) = y
  rule #1: im (r<:t) = r*cos t
  rule #2: im x::int = 0
  rule #3: im x::bigint = 0L
  rule #4: im x::double = 0.0
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #2
  state 2: #3
  state 3: #4
  state 4: #0 #1
	<app> state 5
  state 5: #0 #1
	+: state 6
	<: state 9
  state 6: #0
	<var> state 7
  state 7: #0
	<var> state 8
  state 8: #0
  state 9: #1
	<var> state 10
  state 10: #1
	<var> state 11
  state 11: #1
}
{
  rule #0: conj (x+:y) = x+:-y
  rule #1: conj (r<:t) = r<:-t
  rule #2: conj x::int = x
  rule #3: conj x::bigint = x
  rule #4: conj x::double = x
  state 0: #0 #1 #2 #3 #4
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #2
  state 2: #3
  state 3: #4
  state 4: #0 #1
	<app> state 5
  state 5: #0 #1
	+: state 6
	<: state 9
  state 6: #0
	<var> state 7
  state 7: #0
	<var> state 8
  state 8: #0
  state 9: #1
	<var> state 10
  state 10: #1
	<var> state 11
  state 11: #1
}
{
  rule #0: x::bigint%0L = x/0
  rule #1: x::bigint%y::bigint = (-x)%(-y) if y<0
  rule #2: x::bigint%y::bigint = x div d%(y div d) when d = gcd x y end if gcd x y>1
  rule #3: x::int%y::bigint = bigint x%y
  rule #4: x::bigint%y::int = x%bigint y
  rule #5: x::int%y::int = bigint x%bigint y
  rule #6: x1%y1%(x2%y2) = x1*y2%(y1*x2)
  rule #7: x1%y1%x2 = x1%(y1*x2)
  rule #8: x1%(x2%y2) = x1*y2%x2
  rule #9: z1@(_+:_)%z2@(_<:_) = z1/z2
  rule #10: z1@(_<:_)%z2@(_+:_) = z1/z2
  rule #11: (x1+:y1)%(x2+:y2) = (x1*x2+y1*y2)%d+:(y1*x2-x1*y2)%d when d = x2*x2+y2*y2 end
  rule #12: (x1+:y1)%x2 = x1*x2%d+:y1*x2%d when d = x2*x2 end
  rule #13: x1%(x2+:y2) = x1*x2%d+:(-x1*y2)%d when d = x2*x2+y2*y2 end
  rule #14: (r1<:t1)%(r2<:t2) = r1%r2<:t1-t2
  rule #15: (r1<:t1)%x2 = r1%x2<:t1
  rule #16: x1%(r2<:t2) = x1%r2<:-t2
  rule #17: x::double%y = x/y
  rule #18: x%y::double = x/y
  state 0: #0 #1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18
	<var> state 1
	<var>::int state 14
	<var>::bigint state 29
	<var>::double state 45
	<app> state 64
  state 1: #8 #13 #16 #18
	<var>::double state 2
	<app> state 3
  state 2: #18
  state 3: #8 #13 #16
	<app> state 4
  state 4: #8 #13 #16
	+: state 5
	<: state 8
	% state 11
  state 5: #13
	<var> state 6
  state 6: #13
	<var> state 7
  state 7: #13
  state 8: #16
	<var> state 9
  state 9: #16
	<var> state 10
  state 10: #16
  state 11: #8
	<var> state 12
  state 12: #8
	<var> state 13
  state 13: #8
  state 14: #3 #5 #8 #13 #16 #18
	<var>::int state 15
	<var>::bigint state 16
	<var>::double state 17
	<app> state 18
  state 15: #5
  state 16: #3
  state 17: #18
  state 18: #8 #13 #16
	<app> state 19
  state 19: #8 #13 #16
	+: state 20
	<: state 23
	% state 26
  state 20: #13
	<var> state 21
  state 21: #13
	<var> state 22
  state 22: #13
  state 23: #16
	<var> state 24
  state 24: #16
	<var> state 25
  state 25: #16
  state 26: #8
	<var> state 27
  state 27: #8
	<var> state 28
  state 28: #8
  state 29: #0 #1 #2 #4 #8 #13 #16 #18
	<var>::int state 30
	<var>::bigint state 31
	<var>::double state 32
	<app> state 33
	0L::bigint state 44
  state 30: #4
  state 31: #1 #2
  state 32: #18
  state 33: #8 #13 #16
	<app> state 34
  state 34: #8 #13 #16
	+: state 35
	<: state 38
	% state 41
  state 35: #13
	<var> state 36
  state 36: #13
	<var> state 37
  state 37: #13
  state 38: #16
	<var> state 39
  state 39: #16
	<var> state 40
  state 40: #16
  state 41: #8
	<var> state 42
  state 42: #8
	<var> state 43
  state 43: #8
  state 44: #0 #1 #2
  state 45: #8 #13 #16 #17 #18
	<var> state 46
	<var>::double state 47
	<app> state 48
  state 46: #17
  state 47: #17 #18
  state 48: #8 #13 #16 #17
	<var> state 49
	<app> state 51
  state 49: #17
	<var> state 50
  state 50: #17
  state 51: #8 #13 #16 #17
	<var> state 52
	+: state 55
	<: state 58
	% state 61
  state 52: #17
	<var> state 53
  state 53: #17
	<var> state 54
  state 54: #17
  state 55: #13 #17
	<var> state 56
  state 56: #13 #17
	<var> state 57
  state 57: #13 #17
  state 58: #16 #17
	<var> state 59
  state 59: #16 #17
	<var> state 60
  state 60: #16 #17
  state 61: #8 #17
	<var> state 62
  state 62: #8 #17
	<var> state 63
  state 63: #8 #17
  state 64: #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #18
	<var> state 65
	<app> state 79
  state 65: #8 #13 #16 #18
	<var> state 66
  state 66: #8 #13 #16 #18
	<var>::double state 67
	<app> state 68
  state 67: #18
  state 68: #8 #13 #16
	<app> state 69
  state 69: #8 #13 #16
	+: state 70
	<: state 73
	% state 76
  state 70: #13
	<var> state 71
  state 71: #13
	<var> state 72
  state 72: #13
  state 73: #16
	<var> state 74
  state 74: #16
	<var> state 75
  state 75: #16
  state 76: #8
	<var> state 77
  state 77: #8
	<var> state 78
  state 78: #8
  state 79: #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #18
	<var> state 80
	+: state 95
	<: state 116
	% state 137
  state 80: #8 #13 #16 #18
	<var> state 81
  state 81: #8 #13 #16 #18
	<var> state 82
  state 82: #8 #13 #16 #18
	<var>::double state 83
	<app> state 84
  state 83: #18
  state 84: #8 #13 #16
	<app> state 85
  state 85: #8 #13 #16
	+: state 86
	<: state 89
	% state 92
  state 86: #13
	<var> state 87
  state 87: #13
	<var> state 88
  state 88: #13
  state 89: #16
	<var> state 90
  state 90: #16
	<var> state 91
  state 91: #16
  state 92: #8
	<var> state 93
  state 93: #8
	<var> state 94
  state 94: #8
  state 95: #8 #9 #11 #12 #13 #16 #18
	<var> state 96
  state 96: #8 #9 #11 #12 #13 #16 #18
	<var> state 97
  state 97: #8 #9 #11 #12 #13 #16 #18
	<var> state 98
	<var>::double state 99
	<app> state 100
  state 98: #12
  state 99: #12 #18
  state 100: #8 #9 #11 #12 #13 #16
	<var> state 101
	<app> state 103
  state 101: #12
	<var> state 102
  state 102: #12
  state 103: #8 #9 #11 #12 #13 #16
	<var> state 104
	+: state 107
	<: state 110
	% state 113
  state 104: #12
	<var> state 105
  state 105: #12
	<var> state 106
  state 106: #12
  state 107: #11 #12 #13
	<var> state 108
  state 108: #11 #12 #13
	<var> state 109
  state 109: #11 #12 #13
  state 110: #9 #12 #16
	<var> state 111
  state 111: #9 #12 #16
	<var> state 112
  state 112: #9 #12 #16
  state 113: #8 #12
	<var> state 114
  state 114: #8 #12
	<var> state 115
  state 115: #8 #12
  state 116: #8 #10 #13 #14 #15 #16 #18
	<var> state 117
  state 117: #8 #10 #13 #14 #15 #16 #18
	<var> state 118
  state 118: #8 #10 #13 #14 #15 #16 #18
	<var> state 119
	<var>::double state 120
	<app> state 121
  state 119: #15
  state 120: #15 #18
  state 121: #8 #10 #13 #14 #15 #16
	<var> state 122
	<app> state 124
  state 122: #15
	<var> state 123
  state 123: #15
  state 124: #8 #10 #13 #14 #15 #16
	<var> state 125
	+: state 128
	<: state 131
	% state 134
  state 125: #15
	<var> state 126
  state 126: #15
	<var> state 127
  state 127: #15
  state 128: #10 #13 #15
	<var> state 129
  state 129: #10 #13 #15
	<var> state 130
  state 130: #10 #13 #15
  state 131: #14 #15 #16
	<var> state 132
  state 132: #14 #15 #16
	<var> state 133
  state 133: #14 #15 #16
  state 134: #8 #15
	<var> state 135
  state 135: #8 #15
	<var> state 136
  state 136: #8 #15
  state 137: #6 #7 #8 #13 #16 #18
	<var> state 138
  state 138: #6 #7 #8 #13 #16 #18
	<var> state 139
  state 139: #6 #7 #8 #13 #16 #18
	<var> state 140
	<var>::double state 141
	<app> state 142
  state 140: #7
  state 141: #7 #18
  state 142: #6 #7 #8 #13 #16
	<var> state 143
	<app> state 145
  state 143: #7
	<var> state 144
  state 144: #7
  state 145: #6 #7 #8 #13 #16
	<var> state 146
	+: state 149
	<: state 152
	% state 155
  state 146: #7
	<var> state 147
  state 147: #7
	<var> state 148
  state 148: #7
  state 149: #7 #13
	<var> state 150
  state 150: #7 #13
	<var> state 151
  state 151: #7 #13
  state 152: #7 #16
	<var> state 153
  state 153: #7 #16
	<var> state 154
  state 154: #7 #16
  state 155: #6 #7 #8
	<var> state 156
  state 156: #6 #7 #8
	<var> state 157
  state 157: #6 #7 #8
}
{
  rule #0: rational x@(_%_) = x
  rule #1: rational x::int = x%1
  rule #2: rational x::bigint = x%1
  rule #3: rational x::double = x
  rule #4: rational (x+:y) = rational x+:rational y
  rule #5: rational (x<:y) = rational x<:rational y
  state 0: #0 #1 #2 #3 #4 #5
	<var>::int state 1
	<var>::bigint state 2
	<var>::double state 3
	<app> state 4
  state 1: #1
  state 2: #2
  state 3: #3
  state 4: #0 #4 #5
	<app> state 5
  state 5: #0 #4 #5
	+: state 6
	<: state 9
	% state 12
  state 6: #4
	<var> state 7
  state 7: #4
	<var> state 8
  state 8: #4
  state 9: #5
	<var> state 10
  state 10: #5
	<var> state 11
  state 11: #5
  state 12: #0
	<var> state 13
  state 13: #0
	<var> state 14
  state 14: #0
}
{
  rule #0: num (x%y) = x
  rule #1: num x::int = x
  rule #2: num x::bigint = x
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #1
  state 2: #2
  state 3: #0
	<app> state 4
  state 4: #0
	% state 5
  state 5: #0
	<var> state 6
  state 6: #0
	<var> state 7
  state 7: #0
}
{
  rule #0: den (x%y) = y
  rule #1: den x::int = 1
  rule #2: den x::bigint = 1
  state 0: #0 #1 #2
	<var>::int state 1
	<var>::bigint state 2
	<app> state 3
  state 1: #1
  state 2: #2
  state 3: #0
	<app> state 4
  state 4: #0
	% state 5
  state 5: #0
	<var> state 6
  state 6: #0
	<var> state 7
  state 7: #0
}
{
  rule #0: complexp x = case x of x+:y = realp x&&realp y; x<:y = realp x&&realp y; _ = 0 end
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: realp x = intp x||bigintp x||doublep x||rationalp x
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: rationalp x = case x of x%y = bigintp x&&bigintp y; _ = 0 end
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: numberp x = realp x||complexp x
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: exactp x = intp x||bigintp x||rationalp||complexp x&&exactp (re x)&&exactp (im x) if numberp x
  state 0: #0
	<var> state 1
  state 1: #0
}
{
  rule #0: infp x::double = not nanp x&&nanp (x-x)
  state 0: #0
	<var>::double state 1
  state 1: #0
}
{
  rule #0: nanp x::double = x===nan
  state 0: #0
	<var>::double state 1
  state 1: #0
}
{
  rule #0: q = 44%(-14)
  state 0: #0
	<var> state 1
  state 1: #0
}
let q = 44%(-14);
q;
(-22L)%7L
num q,den q;
-22L,7L
5%7+2%3;
29L%21L
1+2%3;
5L%3L
1+2%3+1.0;
2.66666666666667
3%8-1%3;
1L%24L
(11%10)^3;
1.331
pow (11%10) 3;
1331L%1000L
pow 3 5;
243L
pow 3 (-5);
1L%243L
44/14;
3.14285714285714
44%14;
22L%7L
2+3%8;
19L%8L
1%(22%7);
7L%22L
3%8<1%3;
0
3%8>1%3;
1
max (3%8) (1%3);
3L%8L
{
  rule #0: xs = while (\x -> x<=3) (\x -> x+1%2) (-3%1)
  state 0: #0
	<var> state 1
  state 1: #0
}
let xs = while (\x/*0:*/ -> x/*0:*/<=3 {
  rule #0: x = x<=3
  state 0: #0
	<var> state 1
  state 1: #0
}) (\x/*0:*/ -> x/*0:*/+1%2 {
  rule #0: x = x+1%2
  state 0: #0
	<var> state 1
  state 1: #0
}) (-3%1);
map double xs;
[-3.0,-2.5,-2.0,-1.5,-1.0,-0.5,0.0,0.5,1.0,1.5,2.0,2.5,3.0]
map floor xs;
[-3L,-3L,-2L,-2L,-1L,-1L,0L,0L,1L,1L,2L,2L,3L]
map ceil xs;
[-3L,-2L,-2L,-1L,-1L,0L,0L,1L,1L,2L,2L,3L,3L]
map trunc xs;
[-3L,-2L,-2L,-1L,-1L,0L,0L,0L,1L,1L,2L,2L,3L]
map round xs;
[-3L,-3L,-2L,-2L,-1L,-1L,0L,1L,1L,2L,2L,3L,3L]
trunc (-22%7);
-3L
frac (-22%7);
(-1L)%7L
rational (3/8);
0.375
{
  rule #0: z = 1+(0+:1)*(1%2)
  state 0: #0
	<var> state 1
  state 1: #0
}
let z = 1+(0+:1)*(1%2);
z;
1L%1L+:1L%2L
z*z;
3L%4L+:1L%1L
{
  rule #0: z = (1+2*(0+:1))%(3+4*(0+:1))
  state 0: #0
	<var> state 1
  state 1: #0
}
let z = (1+2*(0+:1))%(3+4*(0+:1));
z;
11L%25L+:2L%25L
z*(3+4*(0+:1));
1L%1L+:2L%1L
4%1*(0+:1)%2;
0L%1L+:2L%1L
4%1*(0+:1)%(1%2);
0L%1L+:8L%1L
{
  rule #0: z = 4%1*(0+:1)%(1+1%2*(0+:1))
  state 0: #0
	<var> state 1
  state 1: #0
}
let z = 4%1*(0+:1)%(1+1%2*(0+:1));
z;
8L%5L+:16L%5L
z*(1+1%2*(0+:1));
0L%1L+:4L%1L
4%1*(0+:1)/(1+1%2*(0+:1));
1.6+:3.2
